<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OBJ\Flash\S4121_V110_2017-04-11.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OBJ\Flash\S4121_V110_2017-04-11.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 561]: Last Updated: Mon Aug 20 17:07:24 2018
<BR><P>
<H3>Maximum Stack Usage =        940 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TSK_ColumnOvenMain_Init &rArr; ColumnOvenRegistersFuncs_InitRegisterBank &rArr; ColumnOvenRegistersFuncs_InitDeviceParams &rArr; ColumnOvenSupportFuncs_DeviceParamsInternCheck &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[52]">Reset_Handler</a>
 <LI><a href="#[23e]">os_sys_manager_ret</a>
 <LI><a href="#[213]">os_switch_tasks_ret</a>
 <LI><a href="#[205]">__user_initial_stackheap</a>
 <LI><a href="#[53]">Undef_Handler</a>
 <LI><a href="#[55]">PAbt_Handler</a>
 <LI><a href="#[56]">DAbt_Handler</a>
 <LI><a href="#[57]">IRQ_Handler</a>
 <LI><a href="#[58]">FIQ_Handler</a>
 <LI><a href="#[61]">Switch_task</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[53]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">Undef_Handler</a><BR>
 <LI><a href="#[55]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">PAbt_Handler</a><BR>
 <LI><a href="#[56]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">DAbt_Handler</a><BR>
 <LI><a href="#[57]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">IRQ_Handler</a><BR>
 <LI><a href="#[58]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[69]">AT91SAM7X_FilterForModbusRequests</a> from at91sam7x.o(.text) referenced from column_oven_modbus_funcs.o(.text)
 <LI><a href="#[69]">AT91SAM7X_FilterForModbusRequests</a> from at91sam7x.o(.text) referenced from valve_act_modbus_funcs.o(.text)
 <LI><a href="#[1e]">ColumnOvenCmdsOwner_ControlParamsSave</a> from column_oven_cmds_owner.o(.text) referenced 2 times from column_oven_cmds_owner.o(.data)
 <LI><a href="#[1f]">ColumnOvenCmdsOwner_DeviceParamsLoad</a> from column_oven_cmds_owner.o(.text) referenced 2 times from column_oven_cmds_owner.o(.data)
 <LI><a href="#[21]">ColumnOvenCmdsOwner_HeatCoolProgramsReset</a> from column_oven_cmds_owner.o(.text) referenced 2 times from column_oven_cmds_owner.o(.data)
 <LI><a href="#[20]">ColumnOvenCmdsOwner_StatusDataLoad</a> from column_oven_cmds_owner.o(.text) referenced 2 times from column_oven_cmds_owner.o(.data)
 <LI><a href="#[28]">ColumnOvenCmdsReg_ControlSectionParams</a> from column_oven_cmds_reg.o(.text) referenced 2 times from column_oven_cmds_reg.o(.data)
 <LI><a href="#[2b]">ColumnOvenCmdsReg_GasSensorAlarmEnabled</a> from column_oven_cmds_reg.o(.text) referenced 2 times from column_oven_cmds_reg.o(.data)
 <LI><a href="#[29]">ColumnOvenCmdsReg_GasSensorAlarmThresholdPPM</a> from column_oven_cmds_reg.o(.text) referenced 2 times from column_oven_cmds_reg.o(.data)
 <LI><a href="#[2a]">ColumnOvenCmdsReg_GasSensorCalibrationResistance</a> from column_oven_cmds_reg.o(.text) referenced 2 times from column_oven_cmds_reg.o(.data)
 <LI><a href="#[2e]">ColumnOvenCmdsReg_HeatCoolProgramSetPointReachedBand</a> from column_oven_cmds_reg.o(.text) referenced 2 times from column_oven_cmds_reg.o(.data)
 <LI><a href="#[2c]">ColumnOvenCmdsReg_TemperatureOffset</a> from column_oven_cmds_reg.o(.text) referenced 2 times from column_oven_cmds_reg.o(.data)
 <LI><a href="#[2d]">ColumnOvenCmdsReg_TemperatureUnit</a> from column_oven_cmds_reg.o(.text) referenced 2 times from column_oven_cmds_reg.o(.data)
 <LI><a href="#[27]">ColumnOvenCmdsUser_HeatCoolCalibrationStart</a> from column_oven_cmds_user.o(.text) referenced 2 times from column_oven_cmds_user.o(.data)
 <LI><a href="#[24]">ColumnOvenCmdsUser_HeatCoolProgramDelete</a> from column_oven_cmds_user.o(.text) referenced 2 times from column_oven_cmds_user.o(.data)
 <LI><a href="#[25]">ColumnOvenCmdsUser_HeatCoolProgramSave</a> from column_oven_cmds_user.o(.text) referenced 2 times from column_oven_cmds_user.o(.data)
 <LI><a href="#[26]">ColumnOvenCmdsUser_HeatCoolProgramSelectToModify</a> from column_oven_cmds_user.o(.text) referenced 2 times from column_oven_cmds_user.o(.data)
 <LI><a href="#[22]">ColumnOvenCmdsUser_HeatCoolProgramStart</a> from column_oven_cmds_user.o(.text) referenced 2 times from column_oven_cmds_user.o(.data)
 <LI><a href="#[23]">ColumnOvenCmdsUser_HeatCoolProgramStop</a> from column_oven_cmds_user.o(.text) referenced 2 times from column_oven_cmds_user.o(.data)
 <LI><a href="#[e]">ColumnOvenSupportTasks_ExternControlContactHandler</a> from column_oven_support_tasks.o(.text) referenced 6 times from at91sam7x.o(.data)
 <LI><a href="#[18]">CommonCmdsOwner_DeviceRunTimeCounterReset</a> from common_cmds_owner.o(.text) referenced 2 times from common_cmds_owner.o(.data)
 <LI><a href="#[1a]">CommonCmdsOwner_ErrorCodeSW_ClearAll</a> from common_cmds_owner.o(.text) referenced 2 times from common_cmds_owner.o(.data)
 <LI><a href="#[19]">CommonCmdsOwner_ErrorCodeSW_ClearCurr</a> from common_cmds_owner.o(.text) referenced 2 times from common_cmds_owner.o(.data)
 <LI><a href="#[17]">CommonCmdsOwner_ModbusSetSlaveAddress</a> from common_cmds_owner.o(.text) referenced 2 times from common_cmds_owner.o(.data)
 <LI><a href="#[15]">CommonCmdsOwner_SykamDeviceDataLoad</a> from common_cmds_owner.o(.text) referenced 2 times from common_cmds_owner.o(.data)
 <LI><a href="#[16]">CommonCmdsOwner_SykamDeviceDataSave</a> from common_cmds_owner.o(.text) referenced 2 times from common_cmds_owner.o(.data)
 <LI><a href="#[1b]">CommonCmdsOwner_SykamDeviceDataWriteEnable</a> from common_cmds_owner.o(.text) referenced 2 times from common_cmds_owner.o(.data)
 <LI><a href="#[1d]">CommonCmdsReg_DeviceActiveInterface</a> from common_cmds_reg.o(.text) referenced 2 times from common_cmds_reg.o(.data)
 <LI><a href="#[56]">DAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[58]">FIQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[57]">IRQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[14]">InitEncGapDiskGate_0</a> from encgapdisk.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[12]">InitEncGapDisk_0</a> from encgapdisk.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[10]">InitMcp2317_0</a> from mcp2317.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[13]">IsrEncGapDiskGate_0</a> from encgapdisk.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[11]">IsrEncGapDisk_0</a> from encgapdisk.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[f]">IsrMcp2317_0</a> from mcp2317.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[4c]">IsrPio0</a> from pio.o(.text) referenced 2 times from pio.o(.data)
 <LI><a href="#[4d]">IsrPio1</a> from pio.o(.text) referenced 2 times from pio.o(.data)
 <LI><a href="#[51]">IsrPwm0</a> from pwm.o(.text) referenced 2 times from pwm.o(.data)
 <LI><a href="#[c]">IsrRtt0</a> from rtt.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[4e]">IsrSpi0</a> from spi.o(.text) referenced 2 times from spi.o(.data)
 <LI><a href="#[4f]">IsrSpi1</a> from spi.o(.text) referenced 2 times from spi.o(.data)
 <LI><a href="#[d]">IsrStpClkDirPwm</a> from stpclkdir.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[50]">IsrStpClkDirTcc0</a> from stpclkdir.o(.text) referenced 2 times from stpclkdir.o(.data)
 <LI><a href="#[4a]">IsrUsart0</a> from usart.o(.text) referenced 2 times from usart.o(.data)
 <LI><a href="#[4b]">IsrUsart1</a> from usart.o(.text) referenced 2 times from usart.o(.data)
 <LI><a href="#[76]">MBPBFuncReadCoils</a> from mbpbcoils.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[75]">MBPBFuncReadDiscreteInputs</a> from mbpbdisc.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[79]">MBPBFuncReadGeneralReference</a> from mbpbgeneral.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[72]">MBPBFuncReadHoldingRegister</a> from mbpbholding.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[74]">MBPBFuncReadInputRegister</a> from mbpbinput.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[73]">MBPBFuncReadWriteMultipleHoldingRegister</a> from mbpbholding.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[7b]">MBPBFuncReportSlaveID</a> from mbpbother.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[77]">MBPBFuncWriteCoil</a> from mbpbcoils.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[7a]">MBPBFuncWriteGeneralReference</a> from mbpbgeneral.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[70]">MBPBFuncWriteHoldingRegister</a> from mbpbholding.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[78]">MBPBFuncWriteMultipleCoils</a> from mbpbcoils.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[71]">MBPBFuncWriteMultipleHoldingRegister</a> from mbpbholding.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[86]">MBPBSerAddrFix</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[84]">MBPBSerAddrGet</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[85]">MBPBSerAddrSet</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[89]">MBPBSerDataGet</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[88]">MBPBSerLenFix</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[87]">MBPBSerLenGet</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[8b]">MBPBSerNotifyRx</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[8d]">MBPBSerNotifyTo</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[8c]">MBPBSerNotifyTxDone</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[83]">MBPBSerParserCook</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[7f]">MBPBSerParserEnable</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[80]">MBPBSerParserStart</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[81]">MBPBSerParserStop</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[82]">MBPBSerParserVerify</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[91]">MBPBSerSyncPrepareRx</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[8a]">MBPBSerTimeOutCalc</a> from mbpbser.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[b]">MBPBTmrHandler</a> from mbpb.o(.text) referenced 2 times from at91sam7x.o(.data)
 <LI><a href="#[55]">PAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[52]">Reset_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[54]">SWI_Handler</a> from hal_arm.o(.emb_text) referenced from sam7.o(RESET)
 <LI><a href="#[90]">SpiMsgChannel</a> from spi.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[8e]">SpiRx</a> from spi.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[8f]">SpiTx</a> from spi.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[9a]">StpClkDirAuxDacRrcs085</a> from stpclkdir.o(.text) referenced from stpclkdir.o(.text)
 <LI><a href="#[9c]">StpClkDirAuxDirAt91Pio</a> from stpclkdir.o(.text) referenced from stpclkdir.o(.text)
 <LI><a href="#[9b]">StpClkDirAuxPwrMcp2317</a> from stpclkdir.o(.text) referenced from stpclkdir.o(.text)
 <LI><a href="#[61]">Switch_task</a> from hal_arm.o(.emb_text) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[68]">TSK_ColumnOvenMain_Init</a> from column_oven_main.o(.text) referenced from column_oven_main.o(.text)
 <LI><a href="#[6a]">TSK_ColumnOvenModbusTasks_CmdExecution</a> from column_oven_modbus_tasks.o(.text) referenced from column_oven_modbus_funcs.o(.text)
 <LI><a href="#[6d]">TSK_ColumnOvenSignalProcessingTasks_TemperatureControl</a> from column_oven_signal_processing_tasks.o(.text) referenced from column_oven_signal_processing_funcs.o(.text)
 <LI><a href="#[6b]">TSK_ColumnOvenSupportTasks_GasSensing</a> from column_oven_support_tasks.o(.text) referenced from column_oven_support_funcs.o(.text)
 <LI><a href="#[6c]">TSK_ColumnOvenSupportTasks_GlobalTimer</a> from column_oven_support_tasks.o(.text) referenced from column_oven_support_funcs.o(.text)
 <LI><a href="#[64]">TSK_CommonModbusTasks_CmdExecution</a> from common_modbus_tasks.o(.text) referenced from common_modbus_funcs.o(.text)
 <LI><a href="#[65]">TSK_CommonSupportTasks_DeviceRunTimeCounter</a> from common_support_tasks.o(.text) referenced from common_support_funcs.o(.text)
 <LI><a href="#[66]">TSK_CommonSupportTasks_MainboardVoltageMonitoring</a> from common_support_tasks.o(.text) referenced from common_support_funcs.o(.text)
 <LI><a href="#[67]">TSK_UtilsTasks_Heartbeat</a> from utils_tasks.o(.text) referenced from utils_funcs.o(.text)
 <LI><a href="#[6e]">TSK_ValveActModbusTasks_CmdExecution</a> from valve_act_modbus_tasks.o(.text) referenced from valve_act_modbus_funcs.o(.text)
 <LI><a href="#[6f]">TSK_ValveActSupportTasks_GenerateInjectSignal</a> from valve_act_support_tasks.o(.text) referenced from valve_act_support_funcs.o(.text)
 <LI><a href="#[9f]">TskEncGapDiskMsg</a> from encgapdisk.o(.text) referenced from encgapdisk.o(.text)
 <LI><a href="#[93]">TskMBPBData</a> from mbpb.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[94]">TskMBPBMsg</a> from mbpb.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[92]">TskMBPBTrgFilter</a> from mbpb.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[9e]">TskNotifyHelperMcp2317</a> from mcp2317.o(.text) referenced from mcp2317.o(.text)
 <LI><a href="#[9d]">TskNotifyMcp2317</a> from mcp2317.o(.text) referenced from mcp2317.o(.text)
 <LI><a href="#[97]">TskSpiMsg</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[98]">TskSpiRx</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[99]">TskSpiTx</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[95]">TskUsartMsg</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[96]">TskUsartRx</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[53]">Undef_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[7e]">UsartMsg</a> from usart.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[7c]">UsartRx</a> from usart.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[7d]">UsartTx</a> from usart.o(.text) referenced from mbpb.o(.text)
 <LI><a href="#[1c]">UtilsFuncs_Dummy</a> from utils_funcs.o(.text) referenced 2 times from common_cmds_user.o(.data)
 <LI><a href="#[34]">ValveActCmdsOwner_CalWithDefaultParams</a> from valve_act_cmds_owner.o(.text) referenced 2 times from valve_act_cmds_owner.o(.data)
 <LI><a href="#[33]">ValveActCmdsOwner_CalWithDeviceParams</a> from valve_act_cmds_owner.o(.text) referenced 2 times from valve_act_cmds_owner.o(.data)
 <LI><a href="#[2f]">ValveActCmdsOwner_DeviceParamsLoad</a> from valve_act_cmds_owner.o(.text) referenced 2 times from valve_act_cmds_owner.o(.data)
 <LI><a href="#[30]">ValveActCmdsOwner_DeviceParamsLoadDefault</a> from valve_act_cmds_owner.o(.text) referenced 2 times from valve_act_cmds_owner.o(.data)
 <LI><a href="#[31]">ValveActCmdsOwner_DeviceParamsSave</a> from valve_act_cmds_owner.o(.text) referenced 2 times from valve_act_cmds_owner.o(.data)
 <LI><a href="#[35]">ValveActCmdsOwner_ResetTotalSwitchCounter</a> from valve_act_cmds_owner.o(.text) referenced 2 times from valve_act_cmds_owner.o(.data)
 <LI><a href="#[32]">ValveActCmdsOwner_StatusDataLoad</a> from valve_act_cmds_owner.o(.text) referenced 2 times from valve_act_cmds_owner.o(.data)
 <LI><a href="#[44]">ValveActCmdsReg_Cal_EdgeTypeTriggeredOn</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[43]">ValveActCmdsReg_Cal_MinUStepsThreshold</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[40]">ValveActCmdsReg_Cal_Mode</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[45]">ValveActCmdsReg_Cal_Tol_UStepsSameGapsCal</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[46]">ValveActCmdsReg_Cal_Tol_UStepsSameGapsRun</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[42]">ValveActCmdsReg_Cal_TrueGapNumber</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[3b]">ValveActCmdsReg_Cal_USPS_Init</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[3f]">ValveActCmdsReg_Cal_USPS_Run</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[3e]">ValveActCmdsReg_Cal_USPS_Start</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[3c]">ValveActCmdsReg_Cal_UStepsAcc</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[3d]">ValveActCmdsReg_Cal_UStepsBreak</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[41]">ValveActCmdsReg_Cal_UStepsFullCircle</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[3a]">ValveActCmdsReg_Cal_UStepsInit</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[49]">ValveActCmdsReg_CurrentValveType</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[47]">ValveActCmdsReg_DAC_HoldMotorDriver</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[48]">ValveActCmdsReg_DAC_RunMotorDriver</a> from valve_act_cmds_reg.o(.text) referenced 2 times from valve_act_cmds_reg.o(.data)
 <LI><a href="#[36]">ValveActCmdsUser_GoToHomePos</a> from valve_act_cmds_user.o(.text) referenced 2 times from valve_act_cmds_user.o(.data)
 <LI><a href="#[39]">ValveActCmdsUser_GoToInquiredPos</a> from valve_act_cmds_user.o(.text) referenced 2 times from valve_act_cmds_user.o(.data)
 <LI><a href="#[37]">ValveActCmdsUser_GoToNextPos</a> from valve_act_cmds_user.o(.text) referenced 2 times from valve_act_cmds_user.o(.data)
 <LI><a href="#[38]">ValveActCmdsUser_GoToPreviousPos</a> from valve_act_cmds_user.o(.text) referenced 2 times from valve_act_cmds_user.o(.data)
 <LI><a href="#[a0]">__SWI_0</a> from hal_arm.o(i.__SWI_0) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[a1]">__SWI_1</a> from rt_membox.o(i.__SWI_1) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[a2]">__SWI_2</a> from rt_membox.o(i.__SWI_2) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[a3]">__SWI_3</a> from hal_arm.o(i.__SWI_3) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[a4]">__SWI_4</a> from hal_arm.o(i.__SWI_4) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[a5]">__SWI_5</a> from rtx_config.o(.text) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[a6]">__SWI_6</a> from hal_arm.o(i.__SWI_6) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[a7]">__SWI_7</a> from hal_arm.o(i.__SWI_7) referenced from swi_table.o(SWI_TABLE)
 <LI><a href="#[aa]">__main</a> from __main.o(!!!main) referenced from sam7.o(RESET)
 <LI><a href="#[5c]">irq_sys_handler</a> from sysirq.o(.text) referenced from rtx_config.o(.emb_text)
 <LI><a href="#[5a]">main</a> from column_oven_main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[5b]">os_clock_interrupt</a> from hal_arm.o(.emb_text) referenced from rtx_config.o(.emb_text)
 <LI><a href="#[62]">os_def_interrupt</a> from rtx_config.o(.text) referenced from rtx_config.o(.text)
 <LI><a href="#[a8]">os_idle_demon</a> from rtx_config.o(.text) referenced from rt_task.o(i.os_sys_init1)
 <LI><a href="#[5e]">os_irq_ack_lock</a> from rtx_config.o(.text) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[5d]">os_sys_init1</a> from rt_task.o(i.os_sys_init1) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[5f]">os_sys_manager</a> from rt_system.o(i.os_sys_manager) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[a9]">os_tsk_create0</a> from rt_task.o(i.os_tsk_create0) referenced from rt_task.o(i.os_sys_init1)
 <LI><a href="#[63]">sys_ctrl_interrupt</a> from rtx_config.o(.emb_text) referenced from rtx_config.o(.text)
 <LI><a href="#[60]">tsk_unlock</a> from rtx_config.o(.text) referenced from hal_arm.o(.emb_text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[26b]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[26c]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[26d]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[26e]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ae]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[b0]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[26f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[270]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[271]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[272]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[273]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[274]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[275]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[276]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[277]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[278]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[279]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[27a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[27b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[27c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[27d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[27e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[27f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[280]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[281]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[282]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[283]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[284]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[285]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[286]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[287]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[ac]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[288]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b2]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b4]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[289]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b5]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[28a]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[207]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[b7]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[28b]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[63]"></a>sys_ctrl_interrupt</STRONG> (ARM, 48 bytes, Stack size 0 bytes, rtx_config.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.text)
</UL>
<P><STRONG><a name="[232]"></a>_inc_qi</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psq_enq
</UL>

<P><STRONG><a name="[23c]"></a>_dec_qc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[237]"></a>os_set_env</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[10b]"></a>os_sys_init0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[23a]"></a>os_sys_run</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[5b]"></a>os_clock_interrupt</STRONG> (ARM, 128 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.emb_text)
</UL>
<P><STRONG><a name="[23e]"></a>os_sys_manager_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[54]"></a>SWI_Handler</STRONG> (ARM, 192 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[213]"></a>os_switch_tasks_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
</UL>

<P><STRONG><a name="[28c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[28d]"></a>irq_sysforce_handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rtx_config.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>os_idle_demon</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.os_sys_init1)
</UL>
<P><STRONG><a name="[bb]"></a>os_error</STRONG> (ARM, 88 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check (via Veneer)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psq_enq (via Veneer)
</UL>

<P><STRONG><a name="[238]"></a>os_tmr_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[231]"></a>os_tmr_force_irq</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psh_req
</UL>

<P><STRONG><a name="[230]"></a>os_tmr_inspect_cnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psh_req
</UL>

<P><STRONG><a name="[22f]"></a>os_tmr_inspect_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psh_req
</UL>

<P><STRONG><a name="[5e]"></a>os_irq_ack_lock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[a5]"></a>__SWI_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[60]"></a>tsk_unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRestart (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_wait
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_itv_wait
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitChannel (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartMsg (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx (via Veneer)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartTx (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserChange (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerEncode (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyExTo (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_kill
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserVerify (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserCook (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyTxDone (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyRx (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerLenGet (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerLenFix (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerAddrSet (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerAddrGet (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteMultipleHoldingRegister (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteMultipleCoils (via Veneer)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteGeneralReference (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadWriteMultipleHoldingRegister (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadInputRegister (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadHoldingRegister (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadGeneralReference (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadDiscreteInputs (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadCoils (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBMsgCtrl (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBTrgFilter (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBMsg (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsGet (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_read (via Veneer)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_check (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskRttMsg (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_write (via Veneer)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSetEx (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirJobClksGet (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksGet (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsSet (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirHzGet (via Veneer)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChange (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskStpClkDirHold (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagQueue (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagUnlock (via Veneer)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxLock (via Veneer)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag (via Veneer)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsg (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsgChannel (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx (via Veneer)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[bd]"></a>__user_perthread_libspace</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr (via Veneer)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[be]"></a>_mutex_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_initialize &rArr; os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[c0]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _mutex_acquire &rArr; os_mut_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[c2]"></a>_mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[69]"></a>AT91SAM7X_FilterForModbusRequests</STRONG> (ARM, 96 bytes, Stack size 24 bytes, at91sam7x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AT91SAM7X_FilterForModbusRequests &rArr; ValveActModbusFuncs_FilterForModbusRequests
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_FilterForModbusRequests
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonModbusFuncs_FilterForModbusRequests
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_FilterForModbusRequests
</UL>
<BR>[Address Reference Count : 2]<UL><LI> column_oven_modbus_funcs.o(.text)
<LI> valve_act_modbus_funcs.o(.text)
</UL>
<P><STRONG><a name="[205]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sam7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c7]"></a>LibExceptionsFuncs_ExceptionSet</STRONG> (ARM, 1384 bytes, Stack size 72 bytes, lib_exceptions_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = LibExceptionsFuncs_ExceptionSet &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_FindAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_DeviceRunTimeCounter
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonModbusTasks_CmdExecution
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportTasks_ExternControlContactHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenModbusTasks_CmdExecution
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportTasks_ExternControlContactHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActSupportTasks_GenerateInjectSignal
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActModbusTasks_CmdExecution
</UL>

<P><STRONG><a name="[cb]"></a>CommonRegistersFuncs_InitDeviceStatusData</STRONG> (ARM, 148 bytes, Stack size 128 bytes, common_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = CommonRegistersFuncs_InitDeviceStatusData &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitRegisterBank
</UL>

<P><STRONG><a name="[ce]"></a>CommonRegistersFuncs_InitDeviceParams</STRONG> (ARM, 140 bytes, Stack size 32 bytes, common_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CommonRegistersFuncs_InitDeviceParams &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitRegisterBank
</UL>

<P><STRONG><a name="[cf]"></a>CommonRegistersFuncs_InitSykamDeviceData</STRONG> (ARM, 380 bytes, Stack size 128 bytes, common_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = CommonRegistersFuncs_InitSykamDeviceData &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_SwapBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductDescSet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitRegisterBank
</UL>

<P><STRONG><a name="[d3]"></a>CommonRegistersFuncs_InitRegisterBank</STRONG> (ARM, 92 bytes, Stack size 8 bytes, common_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = CommonRegistersFuncs_InitRegisterBank &rArr; CommonRegistersFuncs_InitSykamDeviceData &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitSykamDeviceData
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitDeviceParams
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitDeviceStatusData
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[db]"></a>CommonRegistersFuncs_SykamDeviceDataConsistencyCheck</STRONG> (ARM, 56 bytes, Stack size 0 bytes, common_registers_funcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataSave
</UL>

<P><STRONG><a name="[d4]"></a>CommonModbusFuncs_InitTasks</STRONG> (ARM, 176 bytes, Stack size 48 bytes, common_modbus_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CommonModbusFuncs_InitTasks &rArr; MBPBTrgFilterSetEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterSetEx
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[c4]"></a>CommonModbusFuncs_FilterForModbusRequests</STRONG> (ARM, 384 bytes, Stack size 4 bytes, common_modbus_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonModbusFuncs_FilterForModbusRequests
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91SAM7X_FilterForModbusRequests
</UL>

<P><STRONG><a name="[64]"></a>TSK_CommonModbusTasks_CmdExecution</STRONG> (ARM, 524 bytes, Stack size 56 bytes, common_modbus_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = TSK_CommonModbusTasks_CmdExecution &rArr; LibExceptionsFuncs_ExceptionSet &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgWaitDecode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_modbus_funcs.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>CommonCmdsOwner_SykamDeviceDataLoad</STRONG> (ARM, 252 bytes, Stack size 144 bytes, common_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = CommonCmdsOwner_SykamDeviceDataLoad &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_SwapBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>CommonCmdsOwner_SykamDeviceDataSave</STRONG> (ARM, 228 bytes, Stack size 144 bytes, common_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = CommonCmdsOwner_SykamDeviceDataSave &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_SwapBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_SykamDeviceDataConsistencyCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>CommonCmdsOwner_ModbusSetSlaveAddress</STRONG> (ARM, 160 bytes, Stack size 32 bytes, common_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = CommonCmdsOwner_ModbusSetSlaveAddress &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductAddrSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>CommonCmdsOwner_DeviceRunTimeCounterReset</STRONG> (ARM, 284 bytes, Stack size 56 bytes, common_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = CommonCmdsOwner_DeviceRunTimeCounterReset &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRestart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>CommonCmdsOwner_ErrorCodeSW_ClearCurr</STRONG> (ARM, 412 bytes, Stack size 56 bytes, common_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = CommonCmdsOwner_ErrorCodeSW_ClearCurr &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_Clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorCodeSW_ClearCurrPair
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_FindAndSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>CommonCmdsOwner_ErrorCodeSW_ClearAll</STRONG> (ARM, 224 bytes, Stack size 24 bytes, common_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = CommonCmdsOwner_ErrorCodeSW_ClearAll &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_Clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorCodeSW_ClearCurrPair
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>CommonCmdsOwner_SykamDeviceDataWriteEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, common_cmds_owner.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>CommonCmdsReg_DeviceActiveInterface</STRONG> (ARM, 92 bytes, Stack size 40 bytes, common_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = CommonCmdsReg_DeviceActiveInterface &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>CommonSupportFuncs_InitTasks</STRONG> (ARM, 88 bytes, Stack size 8 bytes, common_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommonSupportFuncs_InitTasks &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[c9]"></a>CommonSupportFuncs_ErrorStringSW_FindAndSet</STRONG> (ARM, 516 bytes, Stack size 96 bytes, common_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = CommonSupportFuncs_ErrorStringSW_FindAndSet &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_SwapBytes
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ErrorCodeSW_ClearCurr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
</UL>

<P><STRONG><a name="[de]"></a>CommonSupportFuncs_ErrorCodeSW_ClearCurrPair</STRONG> (ARM, 756 bytes, Stack size 56 bytes, common_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CommonSupportFuncs_ErrorCodeSW_ClearCurrPair &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ErrorCodeSW_ClearAll
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ErrorCodeSW_ClearCurr
</UL>

<P><STRONG><a name="[df]"></a>CommonSupportFuncs_ErrorStringSW_Clear</STRONG> (ARM, 128 bytes, Stack size 80 bytes, common_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = CommonSupportFuncs_ErrorStringSW_Clear &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ErrorCodeSW_ClearAll
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ErrorCodeSW_ClearCurr
</UL>

<P><STRONG><a name="[65]"></a>TSK_CommonSupportTasks_DeviceRunTimeCounter</STRONG> (ARM, 400 bytes, Stack size 32 bytes, common_support_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = TSK_CommonSupportTasks_DeviceRunTimeCounter &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRead
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_support_funcs.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>TSK_CommonSupportTasks_MainboardVoltageMonitoring</STRONG> (ARM, 1080 bytes, Stack size 64 bytes, common_support_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = TSK_CommonSupportTasks_MainboardVoltageMonitoring &rArr; LibExceptionsFuncs_ExceptionSet &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetConvertedData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_support_funcs.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>UtilsFuncs_InitTasks</STRONG> (ARM, 48 bytes, Stack size 8 bytes, utils_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UtilsFuncs_InitTasks &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[d1]"></a>UtilsFuncs_SwapBytes</STRONG> (ARM, 100 bytes, Stack size 12 bytes, utils_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UtilsFuncs_SwapBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataSave
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataLoad
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitSykamDeviceData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_FindAndSet
</UL>

<P><STRONG><a name="[28e]"></a>UtilsFuncs_SwapWords</STRONG> (ARM, 104 bytes, Stack size 12 bytes, utils_funcs.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>UtilsFuncs_CalcMean</STRONG> (ARM, 136 bytes, Stack size 32 bytes, utils_funcs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[da]"></a>UtilsFuncs_FixedMemDataPackagesRW</STRONG> (ARM, 248 bytes, Stack size 48 bytes, utils_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_DeviceRunTimeCounter
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_DeviceRunTimeCounterReset
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ModbusSetSlaveAddress
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataSave
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataLoad
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_StoreGasSensorDefaultValues
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_GasSensorAlarmEnabled
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_GasSensorCalibrationResistance
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_GasSensorAlarmThresholdPPM
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramSave
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_HeatCoolProgramLoad
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramDelete
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_TemperatureUnit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_TemperatureOffset
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_HeatCoolProgramSetPointReachedBand
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_ControlParamsSave
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_DeviceParamsInternCheck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitStatusData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitDeviceParams
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_StatusDataLoad
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoad
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_StatusDataLoad
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsRW
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsSave
</UL>

<P><STRONG><a name="[f4]"></a>UtilsFuncs_FixedMemErase</STRONG> (ARM, 144 bytes, Stack size 40 bytes, utils_funcs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>

<P><STRONG><a name="[1c]"></a>UtilsFuncs_Dummy</STRONG> (ARM, 16 bytes, Stack size 0 bytes, utils_funcs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> common_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>TSK_UtilsTasks_Heartbeat</STRONG> (ARM, 544 bytes, Stack size 8 bytes, utils_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = TSK_UtilsTasks_Heartbeat &rArr; os_dly_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils_funcs.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>TSK_ColumnOvenMain_Init</STRONG> (ARM, 4428 bytes, Stack size 88 bytes, column_oven_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = TSK_ColumnOvenMain_Init &rArr; ColumnOvenRegistersFuncs_InitRegisterBank &rArr; ColumnOvenRegistersFuncs_InitDeviceParams &rArr; ColumnOvenSupportFuncs_DeviceParamsInternCheck &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_InitTasks
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_InitTasks
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRestart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductAddrSet
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataLoad
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonModbusFuncs_InitTasks
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitRegisterBank
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_InitTasks
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitRegisterBank
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_InitTasks
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_CurrentValveType
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_StatusDataLoad
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoadDefault
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoad
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitUnit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitChannel
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmInitUnit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductStateSet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_InitTasks
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_InitTasks
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitRegisterBank
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitTasks
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitDriver
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_StatusDataLoad
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_main.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>main</STRONG> (ARM, 32 bytes, Stack size 8 bytes, column_oven_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[10c]"></a>ColumnOvenRegistersFuncs_InitDeviceParams</STRONG> (ARM, 816 bytes, Stack size 424 bytes, column_oven_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = ColumnOvenRegistersFuncs_InitDeviceParams &rArr; ColumnOvenSupportFuncs_DeviceParamsInternCheck &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_DeviceParamsInternCheck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitRegisterBank
</UL>

<P><STRONG><a name="[10e]"></a>ColumnOvenRegistersFuncs_InitStatusData</STRONG> (ARM, 744 bytes, Stack size 264 bytes, column_oven_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = ColumnOvenRegistersFuncs_InitStatusData &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitRegisterBank
</UL>

<P><STRONG><a name="[106]"></a>ColumnOvenRegistersFuncs_InitRegisterBank</STRONG> (ARM, 60 bytes, Stack size 8 bytes, column_oven_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = ColumnOvenRegistersFuncs_InitRegisterBank &rArr; ColumnOvenRegistersFuncs_InitDeviceParams &rArr; ColumnOvenSupportFuncs_DeviceParamsInternCheck &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitStatusData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitDeviceParams
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[100]"></a>ColumnOvenModbusFuncs_InitDriver</STRONG> (ARM, 496 bytes, Stack size 208 bytes, column_oven_modbus_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ColumnOvenModbusFuncs_InitDriver &rArr; MBPBInit &rArr; UsartInit &rArr; os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductAddrSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductStateSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[107]"></a>ColumnOvenModbusFuncs_InitTasks</STRONG> (ARM, 180 bytes, Stack size 48 bytes, column_oven_modbus_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ColumnOvenModbusFuncs_InitTasks &rArr; MBPBTrgFilterSetEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterSetEx
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[c6]"></a>ColumnOvenModbusFuncs_FilterForModbusRequests</STRONG> (ARM, 464 bytes, Stack size 4 bytes, column_oven_modbus_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ColumnOvenModbusFuncs_FilterForModbusRequests
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91SAM7X_FilterForModbusRequests
</UL>

<P><STRONG><a name="[6a]"></a>TSK_ColumnOvenModbusTasks_CmdExecution</STRONG> (ARM, 932 bytes, Stack size 56 bytes, column_oven_modbus_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = TSK_ColumnOvenModbusTasks_CmdExecution &rArr; LibExceptionsFuncs_ExceptionSet &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgWaitDecode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_modbus_funcs.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>ColumnOvenCmdsOwner_ControlParamsSave</STRONG> (ARM, 648 bytes, Stack size 304 bytes, column_oven_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsOwner_ControlParamsSave &rArr; ColumnOvenSupportFuncs_DeviceParamsInternCheck &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_DeviceParamsInternCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>ColumnOvenCmdsOwner_DeviceParamsLoad</STRONG> (ARM, 1788 bytes, Stack size 344 bytes, column_oven_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsOwner_DeviceParamsLoad &rArr; ColumnOvenSupportFuncs_DeviceParamsInternCheck &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_TemperatureUnit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_TemperatureOffset
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_HeatCoolProgramSetPointReachedBand
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_DeviceParamsInternCheck
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>ColumnOvenCmdsOwner_StatusDataLoad</STRONG> (ARM, 932 bytes, Stack size 232 bytes, column_oven_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsOwner_StatusDataLoad &rArr; ColumnOvenCmdsUser_HeatCoolProgramDelete &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_HeatCoolProgramLoad
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramDelete
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>ColumnOvenCmdsOwner_HeatCoolProgramsReset</STRONG> (ARM, 108 bytes, Stack size 24 bytes, column_oven_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsOwner_HeatCoolProgramsReset &rArr; ColumnOvenCmdsUser_HeatCoolProgramDelete &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>ColumnOvenCmdsUser_HeatCoolProgramStart</STRONG> (ARM, 1756 bytes, Stack size 288 bytes, column_oven_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsUser_HeatCoolProgramStart &rArr; ColumnOvenSupportFuncs_HeatCoolProgramLoad &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_HeatCoolProgramLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportTasks_ExternControlContactHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>ColumnOvenCmdsUser_HeatCoolProgramStop</STRONG> (ARM, 484 bytes, Stack size 264 bytes, column_oven_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ColumnOvenCmdsUser_HeatCoolProgramStop &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>ColumnOvenCmdsUser_HeatCoolProgramDelete</STRONG> (ARM, 1020 bytes, Stack size 232 bytes, column_oven_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsUser_HeatCoolProgramDelete &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_HeatCoolProgramsReset
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_StatusDataLoad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>ColumnOvenCmdsUser_HeatCoolProgramSave</STRONG> (ARM, 2032 bytes, Stack size 392 bytes, column_oven_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsUser_HeatCoolProgramSave &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>ColumnOvenCmdsUser_HeatCoolProgramSelectToModify</STRONG> (ARM, 736 bytes, Stack size 168 bytes, column_oven_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsUser_HeatCoolProgramSelectToModify &rArr; ColumnOvenSupportFuncs_HeatCoolProgramLoad &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_HeatCoolProgramLoad
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>ColumnOvenCmdsUser_HeatCoolCalibrationStart</STRONG> (ARM, 20 bytes, Stack size 0 bytes, column_oven_cmds_user.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>ColumnOvenCmdsReg_ControlSectionParams</STRONG> (ARM, 648 bytes, Stack size 56 bytes, column_oven_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ColumnOvenCmdsReg_ControlSectionParams &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>ColumnOvenCmdsReg_GasSensorAlarmThresholdPPM</STRONG> (ARM, 184 bytes, Stack size 32 bytes, column_oven_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsReg_GasSensorAlarmThresholdPPM &rArr; ColumnOvenSupportFuncs_StoreGasSensorDefaultValues &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_StoreGasSensorDefaultValues
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>ColumnOvenCmdsReg_GasSensorCalibrationResistance</STRONG> (ARM, 184 bytes, Stack size 32 bytes, column_oven_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsReg_GasSensorCalibrationResistance &rArr; ColumnOvenSupportFuncs_StoreGasSensorDefaultValues &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_StoreGasSensorDefaultValues
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>ColumnOvenCmdsReg_GasSensorAlarmEnabled</STRONG> (ARM, 192 bytes, Stack size 32 bytes, column_oven_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsReg_GasSensorAlarmEnabled &rArr; ColumnOvenSupportFuncs_StoreGasSensorDefaultValues &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_StoreGasSensorDefaultValues
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>ColumnOvenCmdsReg_TemperatureOffset</STRONG> (ARM, 264 bytes, Stack size 32 bytes, column_oven_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsReg_TemperatureOffset &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>ColumnOvenCmdsReg_TemperatureUnit</STRONG> (ARM, 264 bytes, Stack size 32 bytes, column_oven_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsReg_TemperatureUnit &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>ColumnOvenCmdsReg_HeatCoolProgramSetPointReachedBand</STRONG> (ARM, 264 bytes, Stack size 32 bytes, column_oven_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = ColumnOvenCmdsReg_HeatCoolProgramSetPointReachedBand &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>ColumnOvenSupportFuncs_InitTasks</STRONG> (ARM, 76 bytes, Stack size 8 bytes, column_oven_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ColumnOvenSupportFuncs_InitTasks &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[110]"></a>ColumnOvenSupportFuncs_HeatCoolProgramLoad</STRONG> (ARM, 248 bytes, Stack size 32 bytes, column_oven_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = ColumnOvenSupportFuncs_HeatCoolProgramLoad &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramSelectToModify
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramStart
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_StatusDataLoad
</UL>

<P><STRONG><a name="[10d]"></a>ColumnOvenSupportFuncs_DeviceParamsInternCheck</STRONG> (ARM, 1224 bytes, Stack size 88 bytes, column_oven_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = ColumnOvenSupportFuncs_DeviceParamsInternCheck &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_ControlParamsSave
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitDeviceParams
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
</UL>

<P><STRONG><a name="[112]"></a>ColumnOvenSupportFuncs_SetDacOutput</STRONG> (ARM, 1776 bytes, Stack size 136 bytes, column_oven_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ColumnOvenSupportFuncs_SetDacOutput &rArr; Dacrrcs085SetOutput &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085GetOutput
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
</UL>

<P><STRONG><a name="[11e]"></a>ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes</STRONG> (ARM, 3004 bytes, Stack size 96 bytes, column_oven_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
</UL>

<P><STRONG><a name="[111]"></a>ColumnOvenSupportFuncs_StoreGasSensorDefaultValues</STRONG> (ARM, 212 bytes, Stack size 32 bytes, column_oven_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = ColumnOvenSupportFuncs_StoreGasSensorDefaultValues &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_GasSensorAlarmEnabled
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_GasSensorCalibrationResistance
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_GasSensorAlarmThresholdPPM
</UL>

<P><STRONG><a name="[e]"></a>ColumnOvenSupportTasks_ExternControlContactHandler</STRONG> (ARM, 976 bytes, Stack size 72 bytes, column_oven_support_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = ColumnOvenSupportTasks_ExternControlContactHandler &rArr; ColumnOvenCmdsUser_HeatCoolProgramStart &rArr; ColumnOvenSupportFuncs_HeatCoolProgramLoad &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToNextPos
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>TSK_ColumnOvenSupportTasks_GasSensing</STRONG> (ARM, 4116 bytes, Stack size 112 bytes, column_oven_support_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = TSK_ColumnOvenSupportTasks_GasSensing &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetConvertedData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_support_funcs.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>TSK_ColumnOvenSupportTasks_GlobalTimer</STRONG> (ARM, 36 bytes, Stack size 0 bytes, column_oven_support_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSK_ColumnOvenSupportTasks_GlobalTimer &rArr; os_evt_set &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_itv_wait (via Veneer)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_itv_set (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_support_funcs.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>ColumnOvenSignalProcessingFuncs_InitTasks</STRONG> (ARM, 48 bytes, Stack size 8 bytes, column_oven_signal_processing_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ColumnOvenSignalProcessingFuncs_InitTasks &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[128]"></a>ColumnOvenSignalProcessingFuncs_GetTemperature</STRONG> (ARM, 432 bytes, Stack size 80 bytes, column_oven_signal_processing_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ColumnOvenSignalProcessingFuncs_GetTemperature &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
</UL>

<P><STRONG><a name="[129]"></a>ColumnOvenSignalProcessingFuncs_CalcControlParams</STRONG> (ARM, 2988 bytes, Stack size 424 bytes, column_oven_signal_processing_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ColumnOvenSignalProcessingFuncs_CalcControlParams &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
</UL>

<P><STRONG><a name="[12a]"></a>ColumnOvenSignalProcessingFuncs_GetControlOutput</STRONG> (ARM, 3712 bytes, Stack size 152 bytes, column_oven_signal_processing_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ColumnOvenSignalProcessingFuncs_GetControlOutput &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
</UL>

<P><STRONG><a name="[6d]"></a>TSK_ColumnOvenSignalProcessingTasks_TemperatureControl</STRONG> (ARM, 5760 bytes, Stack size 128 bytes, column_oven_signal_processing_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = TSK_ColumnOvenSignalProcessingTasks_TemperatureControl &rArr; ColumnOvenSignalProcessingFuncs_CalcControlParams &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_wait (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_SetOutput
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetTemperature
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> column_oven_signal_processing_funcs.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>ValveActRegistersFuncs_InitDeviceParams</STRONG> (ARM, 332 bytes, Stack size 64 bytes, valve_act_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ValveActRegistersFuncs_InitDeviceParams &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitRegisterBank
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoadDefault
</UL>

<P><STRONG><a name="[131]"></a>ValveActRegistersFuncs_InitStatusData</STRONG> (ARM, 312 bytes, Stack size 64 bytes, valve_act_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ValveActRegistersFuncs_InitStatusData &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsValidGet
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitRegisterBank
</UL>

<P><STRONG><a name="[103]"></a>ValveActRegistersFuncs_InitRegisterBank</STRONG> (ARM, 60 bytes, Stack size 8 bytes, valve_act_registers_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ValveActRegistersFuncs_InitRegisterBank &rArr; ValveActRegistersFuncs_InitStatusData &rArr; MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitStatusData
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitDeviceParams
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[133]"></a>ValveActModbusFuncs_InitDriver</STRONG> (ARM, 496 bytes, Stack size 208 bytes, valve_act_modbus_funcs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductAddrSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductStateSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[104]"></a>ValveActModbusFuncs_InitTasks</STRONG> (ARM, 180 bytes, Stack size 48 bytes, valve_act_modbus_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ValveActModbusFuncs_InitTasks &rArr; MBPBTrgFilterSetEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterSetEx
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[c5]"></a>ValveActModbusFuncs_FilterForModbusRequests</STRONG> (ARM, 632 bytes, Stack size 4 bytes, valve_act_modbus_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ValveActModbusFuncs_FilterForModbusRequests
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91SAM7X_FilterForModbusRequests
</UL>

<P><STRONG><a name="[6e]"></a>TSK_ValveActModbusTasks_CmdExecution</STRONG> (ARM, 756 bytes, Stack size 56 bytes, valve_act_modbus_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = TSK_ValveActModbusTasks_CmdExecution &rArr; LibExceptionsFuncs_ExceptionSet &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgWaitDecode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_modbus_funcs.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>ValveActCmdsOwner_DeviceParamsLoad</STRONG> (ARM, 948 bytes, Stack size 152 bytes, valve_act_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsOwner_DeviceParamsLoad &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_TestAndCorrectInternDeviceParams
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_DeviceParamFlagsRW
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskRunParamsRW
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>ValveActCmdsOwner_DeviceParamsLoadDefault</STRONG> (ARM, 184 bytes, Stack size 16 bytes, valve_act_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsOwner_DeviceParamsLoadDefault &rArr; ValveActCmdsReg_DAC_RunMotorDriver &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitDeviceParams
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_RunMotorDriver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_HoldMotorDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>ValveActCmdsOwner_DeviceParamsSave</STRONG> (ARM, 988 bytes, Stack size 112 bytes, valve_act_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsOwner_DeviceParamsSave &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_DeviceParamFlagsRW
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_CurrentValveType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>ValveActCmdsOwner_StatusDataLoad</STRONG> (ARM, 1148 bytes, Stack size 104 bytes, valve_act_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsOwner_StatusDataLoad &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>ValveActCmdsOwner_CalWithDeviceParams</STRONG> (ARM, 1332 bytes, Stack size 136 bytes, valve_act_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsOwner_CalWithDeviceParams &rArr; EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ValveActStateRW
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_CalibrationFlagsRW
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_RunMotorDriver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_HoldMotorDriver
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskHomeEdgeGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeZeroSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_CurrentValveType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>ValveActCmdsOwner_CalWithDefaultParams</STRONG> (ARM, 1060 bytes, Stack size 104 bytes, valve_act_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsOwner_CalWithDefaultParams &rArr; EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ValveActStateRW
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_CalibrationFlagsRW
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_RunMotorDriver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_HoldMotorDriver
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskHomeEdgeGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeZeroSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>ValveActCmdsOwner_ResetTotalSwitchCounter</STRONG> (ARM, 196 bytes, Stack size 48 bytes, valve_act_cmds_owner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsOwner_ResetTotalSwitchCounter &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_owner.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>ValveActCmdsUser_GoToHomePos</STRONG> (ARM, 816 bytes, Stack size 64 bytes, valve_act_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsUser_GoToHomePos &rArr; EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsRW
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_DeviceParamFlagsRW
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_CalibrationFlagsRW
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportTasks_ExternControlContactHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportTasks_ExternControlContactHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>ValveActCmdsUser_GoToNextPos</STRONG> (ARM, 620 bytes, Stack size 48 bytes, valve_act_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsUser_GoToNextPos &rArr; ValveActSupportFuncs_ExecuteMovement &rArr; EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsRW
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_DeviceParamFlagsRW
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_CalibrationFlagsRW
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportTasks_ExternControlContactHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportTasks_ExternControlContactHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>ValveActCmdsUser_GoToPreviousPos</STRONG> (ARM, 588 bytes, Stack size 48 bytes, valve_act_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsUser_GoToPreviousPos &rArr; ValveActSupportFuncs_ExecuteMovement &rArr; EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsRW
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_FindMaxPosition
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_DeviceParamFlagsRW
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_CalibrationFlagsRW
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>ValveActCmdsUser_GoToInquiredPos</STRONG> (ARM, 532 bytes, Stack size 24 bytes, valve_act_cmds_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsUser_GoToInquiredPos &rArr; ValveActSupportFuncs_ExecuteMovement &rArr; EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsRW
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionValidCheck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_DeviceParamFlagsRW
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_CalibrationFlagsRW
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_user.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>ValveActCmdsReg_Cal_UStepsInit</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_UStepsInit &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>ValveActCmdsReg_Cal_USPS_Init</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_USPS_Init &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>ValveActCmdsReg_Cal_UStepsAcc</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_UStepsAcc &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>ValveActCmdsReg_Cal_UStepsBreak</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_UStepsBreak &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>ValveActCmdsReg_Cal_USPS_Start</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_USPS_Start &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>ValveActCmdsReg_Cal_USPS_Run</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_USPS_Run &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>ValveActCmdsReg_Cal_Mode</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_Mode &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>ValveActCmdsReg_Cal_UStepsFullCircle</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_UStepsFullCircle &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>ValveActCmdsReg_Cal_TrueGapNumber</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_TrueGapNumber &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>ValveActCmdsReg_Cal_MinUStepsThreshold</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_MinUStepsThreshold &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>ValveActCmdsReg_Cal_EdgeTypeTriggeredOn</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_EdgeTypeTriggeredOn &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>ValveActCmdsReg_Cal_Tol_UStepsSameGapsCal</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_Tol_UStepsSameGapsCal &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>ValveActCmdsReg_Cal_Tol_UStepsSameGapsRun</STRONG> (ARM, 112 bytes, Stack size 40 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_Cal_Tol_UStepsSameGapsRun &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>ValveActCmdsReg_DAC_HoldMotorDriver</STRONG> (ARM, 360 bytes, Stack size 48 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_DAC_HoldMotorDriver &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirDacSet
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoadDefault
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>ValveActCmdsReg_DAC_RunMotorDriver</STRONG> (ARM, 360 bytes, Stack size 48 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_DAC_RunMotorDriver &rArr; Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirDacSet
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoadDefault
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>ValveActCmdsReg_CurrentValveType</STRONG> (ARM, 684 bytes, Stack size 56 bytes, valve_act_cmds_reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = ValveActCmdsReg_CurrentValveType &rArr; ValveActCmdsOwner_CalWithDeviceParams &rArr; EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsValidGet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_DeviceParamFlagsRW
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_CalibrationFlagsRW
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsSave
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_cmds_reg.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>ValveActSupportFuncs_InitTasks</STRONG> (ARM, 60 bytes, Stack size 8 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ValveActSupportFuncs_InitTasks &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[132]"></a>ValveActSupportFuncs_PositionsValidGet</STRONG> (ARM, 116 bytes, Stack size 0 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitStatusData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_CurrentValveType
</UL>

<P><STRONG><a name="[142]"></a>ValveActSupportFuncs_PositionValidCheck</STRONG> (ARM, 236 bytes, Stack size 32 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ValveActSupportFuncs_PositionValidCheck &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToInquiredPos
</UL>

<P><STRONG><a name="[141]"></a>ValveActSupportFuncs_FindMaxPosition</STRONG> (ARM, 80 bytes, Stack size 0 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToPreviousPos
</UL>

<P><STRONG><a name="[13f]"></a>ValveActSupportFuncs_PositionsRW</STRONG> (ARM, 336 bytes, Stack size 40 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = ValveActSupportFuncs_PositionsRW &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToNextPos
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToInquiredPos
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToPreviousPos
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
</UL>

<P><STRONG><a name="[13d]"></a>ValveActSupportFuncs_StatusDataSet</STRONG> (ARM, 608 bytes, Stack size 72 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = ValveActSupportFuncs_StatusDataSet &rArr; ValveActSupportFuncs_PositionsRW &rArr; UtilsFuncs_FixedMemDataPackagesRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsGet
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsRW
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>

<P><STRONG><a name="[137]"></a>ValveActSupportFuncs_ValveActStateRW</STRONG> (ARM, 328 bytes, Stack size 48 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = ValveActSupportFuncs_ValveActStateRW &rArr; Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>

<P><STRONG><a name="[140]"></a>ValveActSupportFuncs_ExecuteMovement</STRONG> (ARM, 572 bytes, Stack size 64 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = ValveActSupportFuncs_ExecuteMovement &rArr; EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ValveActStateRW
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToNextPos
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToInquiredPos
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToPreviousPos
</UL>

<P><STRONG><a name="[13e]"></a>ValveActSupportFuncs_CalibrationFlagsRW</STRONG> (ARM, 248 bytes, Stack size 40 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ValveActSupportFuncs_CalibrationFlagsRW &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToNextPos
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_CurrentValveType
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToInquiredPos
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToPreviousPos
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>

<P><STRONG><a name="[136]"></a>ValveActSupportFuncs_DeviceParamFlagsRW</STRONG> (ARM, 340 bytes, Stack size 48 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ValveActSupportFuncs_DeviceParamFlagsRW &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToNextPos
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_CurrentValveType
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoad
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToInquiredPos
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToPreviousPos
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsSave
</UL>

<P><STRONG><a name="[134]"></a>ValveActSupportFuncs_TestAndCorrectInternDeviceParams</STRONG> (ARM, 120 bytes, Stack size 0 bytes, valve_act_support_funcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoad
</UL>

<P><STRONG><a name="[146]"></a>ValveActSupportTasks_ExternControlContactHandler</STRONG> (ARM, 460 bytes, Stack size 56 bytes, valve_act_support_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToNextPos
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
</UL>

<P><STRONG><a name="[6f]"></a>TSK_ValveActSupportTasks_GenerateInjectSignal</STRONG> (ARM, 492 bytes, Stack size 16 bytes, valve_act_support_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = TSK_ValveActSupportTasks_GenerateInjectSignal &rArr; LibExceptionsFuncs_ExceptionSet &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> valve_act_support_funcs.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>TskMBPBMsg</STRONG> (ARM, 568 bytes, Stack size 8 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TskMBPBMsg &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>TskMBPBData</STRONG> (ARM, 4444 bytes, Stack size 120 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TskMBPBData &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_kill (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_create (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>MBPBTrgWaitDecode</STRONG> (ARM, 584 bytes, Stack size 72 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MBPBTrgWaitDecode &rArr; os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonModbusTasks_CmdExecution
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenModbusTasks_CmdExecution
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBTrgFilter
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActModbusTasks_CmdExecution
</UL>

<P><STRONG><a name="[92]"></a>TskMBPBTrgFilter</STRONG> (ARM, 600 bytes, Stack size 56 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TskMBPBTrgFilter &rArr; MBPBTrgWaitDecode &rArr; os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgWaitDecode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>MBPBInit</STRONG> (ARM, 7936 bytes, Stack size 80 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = MBPBInit &rArr; UsartInit &rArr; os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitChannel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create_ex0 (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartTx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerTimeOutCalc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserMaximum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyTo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitDriver
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_InitDriver
</UL>

<P><STRONG><a name="[d2]"></a>MBPBProductDescSet</STRONG> (ARM, 112 bytes, Stack size 24 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MBPBProductDescSet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitSykamDeviceData
</UL>

<P><STRONG><a name="[101]"></a>MBPBProductStateSet</STRONG> (ARM, 92 bytes, Stack size 16 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MBPBProductStateSet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitDriver
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_InitDriver
</UL>

<P><STRONG><a name="[dc]"></a>MBPBProductAddrSet</STRONG> (ARM, 264 bytes, Stack size 16 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MBPBProductAddrSet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ModbusSetSlaveAddress
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitDriver
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_InitDriver
</UL>

<P><STRONG><a name="[151]"></a>MBPBMsgCtrl</STRONG> (ARM, 352 bytes, Stack size 24 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MBPBMsgCtrl &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserStop
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserStart
</UL>

<P><STRONG><a name="[152]"></a>MBPBTrgRebuild</STRONG> (ARM, 264 bytes, Stack size 32 bytes, mbpb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[d6]"></a>MBPBTrgFilterSetEx</STRONG> (ARM, 528 bytes, Stack size 56 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MBPBTrgFilterSetEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonModbusFuncs_InitTasks
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_InitTasks
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitTasks
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterSet
</UL>

<P><STRONG><a name="[153]"></a>MBPBTrgFilterSet</STRONG> (ARM, 104 bytes, Stack size 72 bytes, mbpb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterSetEx
</UL>

<P><STRONG><a name="[154]"></a>MBPBTrgFilterStateSet</STRONG> (ARM, 152 bytes, Stack size 24 bytes, mbpb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[155]"></a>MBPBTrgFilterStateGet</STRONG> (ARM, 144 bytes, Stack size 24 bytes, mbpb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[b]"></a>MBPBTmrHandler</STRONG> (ARM, 108 bytes, Stack size 16 bytes, mbpb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MBPBTmrHandler &rArr; isr_mbx_send &rArr; os_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>MBPBSerSyncPrepareRx</STRONG> (ARM, 180 bytes, Stack size 24 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MBPBSerSyncPrepareRx &rArr; os_tsk_pass &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>MBPBSerTimeOutCalc</STRONG> (ARM, 168 bytes, Stack size 48 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MBPBSerTimeOutCalc &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>MBPBSerAddrGet</STRONG> (ARM, 60 bytes, Stack size 16 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MBPBSerAddrGet
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerAddrFix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>MBPBSerAddrSet</STRONG> (ARM, 64 bytes, Stack size 16 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MBPBSerAddrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>MBPBSerAddrFix</STRONG> (ARM, 60 bytes, Stack size 16 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MBPBSerAddrFix &rArr; MBPBSerAddrGet
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerAddrGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>MBPBSerLenGet</STRONG> (ARM, 128 bytes, Stack size 24 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MBPBSerLenGet
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>MBPBSerLenFix</STRONG> (ARM, 120 bytes, Stack size 24 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MBPBSerLenFix
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>MBPBSerDataGet</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mbpbser.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>MBPBSerNotifyExTo</STRONG> (ARM, 704 bytes, Stack size 32 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MBPBSerNotifyExTo &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyTo
</UL>

<P><STRONG><a name="[8d]"></a>MBPBSerNotifyTo</STRONG> (ARM, 36 bytes, Stack size 16 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MBPBSerNotifyTo &rArr; MBPBSerNotifyExTo &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyExTo
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>MBPBSerNotifyRx</STRONG> (ARM, 1828 bytes, Stack size 88 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MBPBSerNotifyRx &rArr; MBPBSerNotifyTo &rArr; MBPBSerNotifyExTo &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBLRC
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBChar2Bin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyTo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>MBPBSerNotifyTxDone</STRONG> (ARM, 228 bytes, Stack size 32 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MBPBSerNotifyTxDone &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>MBPBSerParserVerify</STRONG> (ARM, 252 bytes, Stack size 24 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MBPBSerParserVerify &rArr; MBPBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBLRC
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBCRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>MBPBSerParserCook</STRONG> (ARM, 756 bytes, Stack size 64 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MBPBSerParserCook &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBLRC
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBCRC16
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBBin2Char
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>MBPBSerEncode</STRONG> (ARM, 492 bytes, Stack size 64 bytes, mbpbser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBLRC
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBCRC16
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBBin2Char
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[15f]"></a>MBPBSerDecode</STRONG> (ARM, 720 bytes, Stack size 64 bytes, mbpbser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBLRC
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBChar2Bin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBCRC16
</UL>

<P><STRONG><a name="[28f]"></a>MBPBSerCookedReplyBytes</STRONG> (ARM, 620 bytes, Stack size 24 bytes, mbpbser.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>MBPBSerParserChange</STRONG> (ARM, 352 bytes, Stack size 24 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MBPBSerParserChange &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserDisable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserEnable
</UL>

<P><STRONG><a name="[7f]"></a>MBPBSerParserEnable</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MBPBSerParserEnable &rArr; MBPBSerParserChange &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>MBPBSerParserDisable</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mbpbser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserChange
</UL>

<P><STRONG><a name="[80]"></a>MBPBSerParserStart</STRONG> (ARM, 32 bytes, Stack size 8 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MBPBSerParserStart &rArr; MBPBMsgCtrl &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBMsgCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>MBPBSerParserStop</STRONG> (ARM, 32 bytes, Stack size 8 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MBPBSerParserStop &rArr; MBPBMsgCtrl &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBMsgCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>MBPBSerParserMaximum</STRONG> (ARM, 992 bytes, Stack size 96 bytes, mbpbser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MBPBSerParserMaximum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
</UL>

<P><STRONG><a name="[163]"></a>MBPBRegMsg</STRONG> (ARM, 448 bytes, Stack size 56 bytes, mbpbregcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegDiscreteCB
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegCoilsCB
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegHoldingCB
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegInputCB
</UL>

<P><STRONG><a name="[c8]"></a>MBPBRegAccess</STRONG> (ARM, 1460 bytes, Stack size 64 bytes, mbpbregcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBUtilSetBits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBUtilGetBits
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_DeviceRunTimeCounter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_Clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorCodeSW_ClearCurrPair
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ErrorCodeSW_ClearCurr
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_DeviceRunTimeCounterReset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccessStruct
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_FindAndSet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportTasks_ExternControlContactHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToNextPos
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsReg_ControlSectionParams
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramSelectToModify
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramDelete
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenModbusTasks_CmdExecution
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_DeviceParamsInternCheck
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_CurrentValveType
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportTasks_ExternControlContactHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionsRW
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_PositionValidCheck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToInquiredPos
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToPreviousPos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ValveActStateRW
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_DeviceParamFlagsRW
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_CalibrationFlagsRW
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_RunMotorDriver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_HoldMotorDriver
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_ResetTotalSwitchCounter
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsSave
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActModbusTasks_CmdExecution
</UL>

<P><STRONG><a name="[cd]"></a>MBPBRegAccessStruct</STRONG> (ARM, 64 bytes, Stack size 24 bytes, mbpbregcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MBPBRegAccessStruct &rArr; MBPBRegAccess &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataSave
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataLoad
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitSykamDeviceData
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitDeviceParams
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitDeviceStatusData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitStatusData
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActRegistersFuncs_InitDeviceParams
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramSave
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramStop
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramStart
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_ControlParamsSave
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitStatusData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitDeviceParams
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_StatusDataLoad
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoad
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_StatusDataLoad
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsSave
</UL>

<P><STRONG><a name="[166]"></a>MBPBRegInputCB</STRONG> (ARM, 308 bytes, Stack size 48 bytes, mbpbregcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MBPBRegInputCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegMsg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadInputRegister
</UL>

<P><STRONG><a name="[167]"></a>MBPBRegHoldingCB</STRONG> (ARM, 848 bytes, Stack size 80 bytes, mbpbregcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MBPBRegHoldingCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegMsg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteMultipleHoldingRegister
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteHoldingRegister
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[168]"></a>MBPBRegCoilsCB</STRONG> (ARM, 1152 bytes, Stack size 96 bytes, mbpbregcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MBPBRegCoilsCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBUtilSetBits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBUtilGetBits
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegMsg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteMultipleCoils
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteCoil
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadCoils
</UL>

<P><STRONG><a name="[169]"></a>MBPBRegDiscreteCB</STRONG> (ARM, 508 bytes, Stack size 72 bytes, mbpbregcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MBPBRegDiscreteCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBUtilGetBits
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegMsg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[16c]"></a>MBPBRegGeneralReferenceCB</STRONG> (ARM, 412 bytes, Stack size 64 bytes, mbpbregcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MBPBRegGeneralReferenceCB
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteGeneralReference
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadGeneralReference
</UL>

<P><STRONG><a name="[16a]"></a>MBPBError2Exception</STRONG> (ARM, 108 bytes, Stack size 0 bytes, mbpbutils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteMultipleHoldingRegister
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteMultipleCoils
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteHoldingRegister
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteGeneralReference
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncWriteCoil
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadInputRegister
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadHoldingRegister
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadGeneralReference
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadDiscreteInputs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReadCoils
</UL>

<P><STRONG><a name="[165]"></a>MBPBUtilSetBits</STRONG> (ARM, 176 bytes, Stack size 24 bytes, mbpbutils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MBPBUtilSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegCoilsCB
</UL>

<P><STRONG><a name="[164]"></a>MBPBUtilGetBits</STRONG> (ARM, 112 bytes, Stack size 12 bytes, mbpbutils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MBPBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegDiscreteCB
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegCoilsCB
</UL>

<P><STRONG><a name="[15b]"></a>MBPBChar2Bin</STRONG> (ARM, 96 bytes, Stack size 0 bytes, mbpbutils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerDecode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyRx
</UL>

<P><STRONG><a name="[15d]"></a>MBPBBin2Char</STRONG> (ARM, 60 bytes, Stack size 0 bytes, mbpbutils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerEncode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserCook
</UL>

<P><STRONG><a name="[15a]"></a>MBPBLRC</STRONG> (ARM, 64 bytes, Stack size 4 bytes, mbpbutils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MBPBLRC
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerDecode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerEncode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserVerify
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserCook
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyRx
</UL>

<P><STRONG><a name="[15c]"></a>MBPBCRC16</STRONG> (ARM, 84 bytes, Stack size 12 bytes, mbpbutils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MBPBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerDecode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerEncode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserVerify
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserCook
</UL>

<P><STRONG><a name="[70]"></a>MBPBFuncWriteHoldingRegister</STRONG> (ARM, 124 bytes, Stack size 32 bytes, mbpbholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MBPBFuncWriteHoldingRegister &rArr; MBPBRegHoldingCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>MBPBFuncWriteMultipleHoldingRegister</STRONG> (ARM, 288 bytes, Stack size 48 bytes, mbpbholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MBPBFuncWriteMultipleHoldingRegister &rArr; MBPBRegHoldingCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>MBPBFuncReadHoldingRegister</STRONG> (ARM, 336 bytes, Stack size 48 bytes, mbpbholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MBPBFuncReadHoldingRegister &rArr; MBPBRegHoldingCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>MBPBFuncReadWriteMultipleHoldingRegister</STRONG> (ARM, 536 bytes, Stack size 64 bytes, mbpbholding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MBPBFuncReadWriteMultipleHoldingRegister &rArr; MBPBRegHoldingCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>MBPBFuncReadInputRegister</STRONG> (ARM, 336 bytes, Stack size 48 bytes, mbpbinput.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MBPBFuncReadInputRegister &rArr; MBPBRegInputCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegInputCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>MBPBFuncReadDiscreteInputs</STRONG> (ARM, 396 bytes, Stack size 56 bytes, mbpbdisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MBPBFuncReadDiscreteInputs &rArr; MBPBRegDiscreteCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegDiscreteCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>MBPBFuncReadCoils</STRONG> (ARM, 400 bytes, Stack size 56 bytes, mbpbcoils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MBPBFuncReadCoils &rArr; MBPBRegCoilsCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>MBPBFuncWriteCoil</STRONG> (ARM, 208 bytes, Stack size 32 bytes, mbpbcoils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MBPBFuncWriteCoil &rArr; MBPBRegCoilsCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>MBPBFuncWriteMultipleCoils</STRONG> (ARM, 348 bytes, Stack size 56 bytes, mbpbcoils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MBPBFuncWriteMultipleCoils &rArr; MBPBRegCoilsCB &rArr; MBPBRegMsg &rArr; os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>MBPBFuncReportSlaveID</STRONG> (ARM, 372 bytes, Stack size 56 bytes, mbpbother.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MBPBFuncReportSlaveID &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_send (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>MBPBFuncWriteGeneralReference</STRONG> (ARM, 360 bytes, Stack size 64 bytes, mbpbgeneral.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MBPBFuncWriteGeneralReference &rArr; MBPBRegGeneralReferenceCB
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegGeneralReferenceCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>MBPBFuncReadGeneralReference</STRONG> (ARM, 460 bytes, Stack size 56 bytes, mbpbgeneral.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MBPBFuncReadGeneralReference &rArr; MBPBRegGeneralReferenceCB
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBError2Exception
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegGeneralReferenceCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>UsartIrqHandler</STRONG> (ARM, 3112 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UsartIrqHandler &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_US_DisableIt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrUsart1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrUsart0
</UL>

<P><STRONG><a name="[4a]"></a>IsrUsart0</STRONG> (ARM, 20 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = IsrUsart0 &rArr; UsartIrqHandler &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>IsrUsart1</STRONG> (ARM, 20 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = IsrUsart1 &rArr; UsartIrqHandler &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[172]"></a>TskUsartTx</STRONG> (ARM, 556 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_US_EnableIt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[96]"></a>TskUsartRx</STRONG> (ARM, 1520 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = TskUsartRx &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_US_EnableIt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>TskUsartMsg</STRONG> (ARM, 504 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TskUsartMsg &rArr; os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>UsartInit</STRONG> (ARM, 1468 bytes, Stack size 64 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = UsartInit &rArr; os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_US_EnableIt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_US_DisableIt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_US_Configure
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create_ex0 (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
</UL>

<P><STRONG><a name="[7e]"></a>UsartMsg</STRONG> (ARM, 384 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UsartMsg &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>UsartRx</STRONG> (ARM, 940 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = UsartRx &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>UsartTx</STRONG> (ARM, 1100 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UsartTx &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>PioIrqHandler</STRONG> (ARM, 540 bytes, Stack size 40 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PioIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrPio1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrPio0
</UL>

<P><STRONG><a name="[4c]"></a>IsrPio0</STRONG> (ARM, 20 bytes, Stack size 24 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IsrPio0 &rArr; PioIrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pio.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>IsrPio1</STRONG> (ARM, 20 bytes, Stack size 24 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IsrPio1 &rArr; PioIrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pio.o(.data)
</UL>
<P><STRONG><a name="[17b]"></a>PioInitIrq</STRONG> (ARM, 152 bytes, Stack size 8 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PioInitIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInit
</UL>

<P><STRONG><a name="[177]"></a>PioCfgPinAttr</STRONG> (ARM, 272 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInit
</UL>

<P><STRONG><a name="[f6]"></a>PioInit</STRONG> (ARM, 636 bytes, Stack size 40 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PioInit &rArr; PioInitIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_OutputEnable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_Enable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_CfgPeriph
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioCfgPinAttr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInitIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[17c]"></a>SpiIrqHandler</STRONG> (ARM, 6896 bytes, Stack size 64 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SpiIrqHandler &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_check
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_give
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_SPI_Enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_SPI_DisableIt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrSpi1
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrSpi0
</UL>

<P><STRONG><a name="[4e]"></a>IsrSpi0</STRONG> (ARM, 20 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IsrSpi0 &rArr; SpiIrqHandler &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>IsrSpi1</STRONG> (ARM, 20 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IsrSpi1 &rArr; SpiIrqHandler &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>TskSpiTx</STRONG> (ARM, 26136 bytes, Stack size 128 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TskSpiTx &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_SPI_EnableIt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>TskSpiRx</STRONG> (ARM, 11252 bytes, Stack size 112 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = TskSpiRx &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_SPI_EnableIt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>TskSpiMsgChannel</STRONG> (ARM, 696 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
</UL>

<P><STRONG><a name="[97]"></a>TskSpiMsg</STRONG> (ARM, 464 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TskSpiMsg &rArr; os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>SpiInitUnit</STRONG> (ARM, 1720 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SpiInitUnit &rArr; os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create_ex0 (via Veneer)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_SPI_Reset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_SPI_EnableIt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_SPI_Enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_SPI_DisableIt
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[f9]"></a>SpiInitChannel</STRONG> (ARM, 2636 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SpiInitChannel &rArr; os_sem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[183]"></a>SpiMsgUnit</STRONG> (ARM, 340 bytes, Stack size 40 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgUnitCheck
</UL>

<P><STRONG><a name="[184]"></a>SpiMsgUnitCheck</STRONG> (ARM, 104 bytes, Stack size 40 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgUnit
</UL>

<P><STRONG><a name="[90]"></a>SpiMsgChannel</STRONG> (ARM, 464 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWRSR
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssRDSR
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssCtrl
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[185]"></a>SpiMsgChannelCheck</STRONG> (ARM, 108 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWRSR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317
</UL>

<P><STRONG><a name="[186]"></a>SpiMsgChannelNext</STRONG> (ARM, 184 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWRSR
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssRDSR
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssCtrl
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317
</UL>

<P><STRONG><a name="[187]"></a>SpiRxTag</STRONG> (ARM, 12548 bytes, Stack size 64 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssRDSR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317
</UL>

<P><STRONG><a name="[8e]"></a>SpiRx</STRONG> (ARM, 64 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWRSR
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>SpiTxTag</STRONG> (ARM, 5136 bytes, Stack size 48 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SpiTxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssRDSR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317
</UL>

<P><STRONG><a name="[8f]"></a>SpiTx</STRONG> (ARM, 64 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SpiTx &rArr; SpiTxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWRSR
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbpb.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>SpiTxLock</STRONG> (ARM, 396 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SpiTxLock &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>

<P><STRONG><a name="[18a]"></a>SpiTxTagUnlock</STRONG> (ARM, 3544 bytes, Stack size 56 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SpiTxTagUnlock &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxUnlock
</UL>

<P><STRONG><a name="[18b]"></a>SpiTxUnlock</STRONG> (ARM, 56 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SpiTxUnlock &rArr; SpiTxTagUnlock &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>

<P><STRONG><a name="[18c]"></a>SpiTxTagQueue</STRONG> (ARM, 1656 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SpiTxTagQueue &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxQueue
</UL>

<P><STRONG><a name="[18d]"></a>SpiTxQueue</STRONG> (ARM, 64 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SpiTxQueue &rArr; SpiTxTagQueue &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
</UL>

<P><STRONG><a name="[9c]"></a>StpClkDirAuxDirAt91Pio</STRONG> (ARM, 188 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StpClkDirAuxDirAt91Pio
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_SetOutput
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_ClearOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpclkdir.o(.text)
</UL>
<P><STRONG><a name="[18f]"></a>StpClkDirAuxPwrAt91Pio</STRONG> (ARM, 188 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_SetOutput
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_ClearOutput
</UL>

<P><STRONG><a name="[9b]"></a>StpClkDirAuxPwrMcp2317</STRONG> (ARM, 180 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = StpClkDirAuxPwrMcp2317 &rArr; Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpclkdir.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>StpClkDirAuxDacRrcs085</STRONG> (ARM, 144 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = StpClkDirAuxDacRrcs085 &rArr; Dacrrcs085SetOutput &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpclkdir.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>StpClkDirTccIrqHandler</STRONG> (ARM, 1848 bytes, Stack size 32 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = StpClkDirTccIrqHandler &rArr; StpClkDirTccIrqHandlerStop &rArr; os_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerPrepareLast
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerClksUpdate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerBrake
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_AIC_AcknowledgeIt
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrStpClkDirTcc0
</UL>

<P><STRONG><a name="[50]"></a>IsrStpClkDirTcc0</STRONG> (ARM, 20 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = IsrStpClkDirTcc0 &rArr; StpClkDirTccIrqHandler &rArr; StpClkDirTccIrqHandlerStop &rArr; os_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpclkdir.o(.data)
</UL>
<P><STRONG><a name="[197]"></a>StpClkDirPwmIrqHandler</STRONG> (ARM, 564 bytes, Stack size 48 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StpClkDirPwmIrqHandler &rArr; isr_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_check
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_read
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmMbxId
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_InterruptDisable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_AIC_AcknowledgeIt
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrStpClkDirPwm
</UL>

<P><STRONG><a name="[d]"></a>IsrStpClkDirPwm</STRONG> (ARM, 28 bytes, Stack size 16 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IsrStpClkDirPwm &rArr; StpClkDirPwmIrqHandler &rArr; isr_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[19b]"></a>TskStpClkDirHold</STRONG> (ARM, 740 bytes, Stack size 8 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPowerEx
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSetEx
</UL>

<P><STRONG><a name="[19e]"></a>StpClkDirInitEx</STRONG> (ARM, 1160 bytes, Stack size 32 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = StpClkDirInitEx &rArr; os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create_ex0 (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_TC_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirInit
</UL>

<P><STRONG><a name="[fd]"></a>StpClkDirInit</STRONG> (ARM, 56 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = StpClkDirInit &rArr; StpClkDirInitEx &rArr; os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirInitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[1a0]"></a>StpClkDirPower</STRONG> (ARM, 48 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPowerEx
</UL>

<P><STRONG><a name="[1a1]"></a>StpClkDirProfileAdjust</STRONG> (ARM, 416 bytes, Stack size 64 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = StpClkDirProfileAdjust
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
</UL>

<P><STRONG><a name="[1a2]"></a>StpClkDirPwmQueue</STRONG> (ARM, 100 bytes, Stack size 40 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = StpClkDirPwmQueue &rArr; os_mbx_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmMbxId
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChange
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
</UL>

<P><STRONG><a name="[1a7]"></a>StpClkDirModuloClksGet</STRONG> (ARM, 36 bytes, Stack size 0 bytes, stpclkdir.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
</UL>

<P><STRONG><a name="[1a4]"></a>StpClkDirPwmQueueFree</STRONG> (ARM, 72 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StpClkDirPwmQueueFree
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmMbxId
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChange
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
</UL>

<P><STRONG><a name="[1a5]"></a>StpClkDirMoveMax</STRONG> (ARM, 2028 bytes, Stack size 160 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_clear
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmCalcCprePrdDty
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueueFree
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirModuloClksGet
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMove
</UL>

<P><STRONG><a name="[1aa]"></a>StpClkDirMove</STRONG> (ARM, 104 bytes, Stack size 72 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
</UL>

<P><STRONG><a name="[1ab]"></a>StpClkDirSpeedChange</STRONG> (ARM, 1060 bytes, Stack size 88 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_write
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmCalcCprePrdDty
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_InterruptEnable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueueFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1ad]"></a>StpClkDirBrk</STRONG> (ARM, 240 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
</UL>

<P><STRONG><a name="[1ae]"></a>StpClkDirQuit</STRONG> (ARM, 188 bytes, Stack size 16 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop
</UL>

<P><STRONG><a name="[1af]"></a>StpClkDirSpeedChangeWait</STRONG> (ARM, 356 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
</UL>

<P><STRONG><a name="[139]"></a>StpClkDirWait</STRONG> (ARM, 236 bytes, Stack size 16 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = StpClkDirWait &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>

<P><STRONG><a name="[1b0]"></a>StpClkDirClksPosOffsSet</STRONG> (ARM, 252 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1b1]"></a>StpClkDirClksPosOffsGet</STRONG> (ARM, 264 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1b2]"></a>StpClkDirClksPosOffsVal</STRONG> (ARM, 296 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StpClkDirClksPosOffsVal &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
</UL>

<P><STRONG><a name="[1b3]"></a>StpClkDirClksPosOffsMakePlus</STRONG> (ARM, 292 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1b4]"></a>StpClkDirHzGet</STRONG> (ARM, 104 bytes, Stack size 16 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmCalcHz
</UL>

<P><STRONG><a name="[1b6]"></a>StpClkDirClksAbsRawSet</STRONG> (ARM, 252 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1b7]"></a>StpClkDirClksAbsRawGet</STRONG> (ARM, 280 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1b8]"></a>StpClkDirClksAbsSet</STRONG> (ARM, 308 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StpClkDirClksAbsSet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskRunParamsRW
</UL>

<P><STRONG><a name="[1b9]"></a>StpClkDirClksAbsShiftSet</STRONG> (ARM, 264 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSetEx
</UL>

<P><STRONG><a name="[1ba]"></a>StpClkDirClksAbsShiftGet</STRONG> (ARM, 280 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[144]"></a>StpClkDirClksAbsGet</STRONG> (ARM, 428 bytes, Stack size 16 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = StpClkDirClksAbsGet &rArr; StpClkDirTccIrqHandlerClksUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerClksUpdate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskRunParamsRW
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrEncGapDiskIrqHandler
</UL>

<P><STRONG><a name="[1bb]"></a>StpClkDirClksGet</STRONG> (ARM, 108 bytes, Stack size 16 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
</UL>

<P><STRONG><a name="[1bc]"></a>StpClkDirJobClksGet</STRONG> (ARM, 108 bytes, Stack size 16 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
</UL>

<P><STRONG><a name="[1e2]"></a>StpClkDirModuloMaxClksGet</STRONG> (ARM, 60 bytes, Stack size 0 bytes, stpclkdir.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskHomeEdgeGet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskEncGapDiskMsg
</UL>

<P><STRONG><a name="[1bd]"></a>StpClkDirMoveResultGet</STRONG> (ARM, 264 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[143]"></a>StpClkDirDacSet</STRONG> (ARM, 304 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StpClkDirDacSet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_RunMotorDriver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_HoldMotorDriver
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskRunParamsRW
</UL>

<P><STRONG><a name="[1be]"></a>StpClkDirDacGet</STRONG> (ARM, 312 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = StpClkDirDacGet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskRunParamsRW
</UL>

<P><STRONG><a name="[290]"></a>StpClkDirSnapShotSizeGet</STRONG> (ARM, 8 bytes, Stack size 0 bytes, stpclkdir.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>StpClkDirSnapShotAddrGet</STRONG> (ARM, 32 bytes, Stack size 0 bytes, stpclkdir.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>StpClkDirSnapShot</STRONG> (ARM, 500 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1c0]"></a>StpClkDirOffsetPush</STRONG> (ARM, 92 bytes, Stack size 24 bytes, stpclkdir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StpClkDirOffsetPush &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskEncGapDiskMsg
</UL>

<P><STRONG><a name="[1c1]"></a>StpClkDirPwmQueueClear</STRONG> (ARM, 136 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmMbxId
</UL>

<P><STRONG><a name="[1c2]"></a>StpClkDirStateSet</STRONG> (ARM, 132 bytes, Stack size 24 bytes, stpclkdir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmMbxId
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_InterruptEnable
</UL>

<P><STRONG><a name="[1c3]"></a>PwmIrqHandler</STRONG> (ARM, 332 bytes, Stack size 32 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PwmIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrPwm0
</UL>

<P><STRONG><a name="[51]"></a>IsrPwm0</STRONG> (ARM, 20 bytes, Stack size 24 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IsrPwm0 &rArr; PwmIrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.data)
</UL>
<P><STRONG><a name="[1c4]"></a>PwmInitIrq</STRONG> (ARM, 168 bytes, Stack size 12 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PwmInitIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmInitUnit
</UL>

<P><STRONG><a name="[f7]"></a>PwmInitUnit</STRONG> (ARM, 232 bytes, Stack size 40 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PwmInitUnit &rArr; PwmInitIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmInitIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[1a8]"></a>PwmCalcCprePrdDty</STRONG> (ARM, 328 bytes, Stack size 56 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = PwmCalcCprePrdDty
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChange
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
</UL>

<P><STRONG><a name="[1b5]"></a>PwmCalcHz</STRONG> (ARM, 72 bytes, Stack size 24 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirHzGet
</UL>

<P><STRONG><a name="[1c5]"></a>RttIrqHandler</STRONG> (ARM, 280 bytes, Stack size 16 bytes, rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RttIrqHandler &rArr; isr_mbx_send &rArr; os_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrRtt0
</UL>

<P><STRONG><a name="[c]"></a>IsrRtt0</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IsrRtt0 &rArr; RttIrqHandler &rArr; isr_mbx_send &rArr; os_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[1c6]"></a>TskRttMsg</STRONG> (ARM, 408 bytes, Stack size 8 bytes, rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
</UL>

<P><STRONG><a name="[102]"></a>RttInit</STRONG> (ARM, 360 bytes, Stack size 24 bytes, rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RttInit &rArr; os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create_ex0 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[dd]"></a>RttRestart</STRONG> (ARM, 764 bytes, Stack size 64 bytes, rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = RttRestart &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_DeviceRunTimeCounterReset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[1c7]"></a>RttSLCKGet</STRONG> (ARM, 144 bytes, Stack size 24 bytes, rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1c8]"></a>RttMsg</STRONG> (ARM, 296 bytes, Stack size 32 bytes, rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttAlmSet
</UL>

<P><STRONG><a name="[1c9]"></a>RttAlmSet</STRONG> (ARM, 132 bytes, Stack size 24 bytes, rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttMsg
</UL>

<P><STRONG><a name="[e5]"></a>RttRead</STRONG> (ARM, 144 bytes, Stack size 24 bytes, rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RttRead &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_DeviceRunTimeCounter
</UL>

<P><STRONG><a name="[5c]"></a>irq_sys_handler</STRONG> (ARM, 88 bytes, Stack size 32 bytes, sysirq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irq_sys_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.emb_text)
</UL>
<P><STRONG><a name="[1cb]"></a>AdcGetConvertedDataSingleChannel</STRONG> (ARM, 240 bytes, Stack size 4 bytes, adcle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AdcGetConvertedDataSingleChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetConvertedData
</UL>

<P><STRONG><a name="[1ca]"></a>AdcStartConversion</STRONG> (ARM, 72 bytes, Stack size 16 bytes, adcle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AdcStartConversion &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetConvertedData
</UL>

<P><STRONG><a name="[e6]"></a>AdcGetConvertedData</STRONG> (ARM, 212 bytes, Stack size 32 bytes, adcle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AdcGetConvertedData &rArr; AdcStartConversion &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcStartConversion
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetConvertedDataSingleChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
</UL>

<P><STRONG><a name="[1cc]"></a>AdcCfgModeReg</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adcle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[ff]"></a>AdcInit</STRONG> (ARM, 720 bytes, Stack size 80 bytes, adcle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AdcInit &rArr; os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_init (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcCfgModeReg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[1cd]"></a>AdcEnableChannel</STRONG> (ARM, 72 bytes, Stack size 24 bytes, adcle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release (via Veneer)
</UL>

<P><STRONG><a name="[1ce]"></a>AdcDisableChannel</STRONG> (ARM, 72 bytes, Stack size 24 bytes, adcle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release (via Veneer)
</UL>

<P><STRONG><a name="[1cf]"></a>AdcSoftReset</STRONG> (ARM, 72 bytes, Stack size 16 bytes, adcle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release (via Veneer)
</UL>

<P><STRONG><a name="[1d0]"></a>AdcEnableInterrupt</STRONG> (ARM, 124 bytes, Stack size 24 bytes, adcle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release (via Veneer)
</UL>

<P><STRONG><a name="[1d1]"></a>AdcDisableInterrupt</STRONG> (ARM, 124 bytes, Stack size 24 bytes, adcle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release (via Veneer)
</UL>

<P><STRONG><a name="[292]"></a>AdcIsChannelInterruptStatusSet</STRONG> (ARM, 40 bytes, Stack size 0 bytes, adcle.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>sem_check</STRONG> (ARM, 92 bytes, Stack size 24 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_check
</UL>

<P><STRONG><a name="[174]"></a>os_sem_check</STRONG> (ARM, 36 bytes, Stack size 16 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_check
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartMsg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskRttMsg
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChangeWait
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirQuit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirBrk
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChange
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskStpClkDirHold
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsgChannel
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx
</UL>

<P><STRONG><a name="[171]"></a>isr_sem_check</STRONG> (ARM, 32 bytes, Stack size 8 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isr_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_check
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmIrqHandler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrMcp2317IrqHandler
</UL>

<P><STRONG><a name="[191]"></a>isr_mbx_write</STRONG> (ARM, 112 bytes, Stack size 0 bytes, support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_write
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandler
</UL>

<P><STRONG><a name="[1a3]"></a>os_mbx_write</STRONG> (ARM, 116 bytes, Stack size 24 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_mbx_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirStateSet
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChange
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueue
</UL>

<P><STRONG><a name="[198]"></a>isr_mbx_read</STRONG> (ARM, 124 bytes, Stack size 0 bytes, support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_read
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmIrqHandler
</UL>

<P><STRONG><a name="[1d3]"></a>os_mbx_read</STRONG> (ARM, 84 bytes, Stack size 24 bytes, support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_read
</UL>

<P><STRONG><a name="[14a]"></a>os_mbx_send_safe</STRONG> (ARM, 132 bytes, Stack size 24 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_mbx_send_safe &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartTx
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegMsg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyExTo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyTxDone
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBTrgFilter
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317
</UL>

<P><STRONG><a name="[1d5]"></a>os_mbx_count</STRONG> (ARM, 16 bytes, Stack size 0 bytes, support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_count
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_clear
</UL>

<P><STRONG><a name="[1d4]"></a>isr_mbx_count</STRONG> (ARM, 24 bytes, Stack size 4 bytes, support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_count
</UL>

<P><STRONG><a name="[1a6]"></a>os_mbx_clear</STRONG> (ARM, 152 bytes, Stack size 24 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_mbx_clear &rArr; os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
</UL>

<P><STRONG><a name="[16f]"></a>memcpyflex</STRONG> (ARM, 548 bytes, Stack size 72 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartTx
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRx
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagQueue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
</UL>

<P><STRONG><a name="[23f]"></a>os_tmr_call</STRONG> (ARM, 348 bytes, Stack size 16 bytes, tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_tmr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_tick (via Veneer)
</UL>

<P><STRONG><a name="[1d8]"></a>IsrMcp2317IrqHandler</STRONG> (ARM, 108 bytes, Stack size 32 bytes, mcp2317.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IsrMcp2317IrqHandler &rArr; isr_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrMcp2317_0
</UL>

<P><STRONG><a name="[f]"></a>IsrMcp2317_0</STRONG> (ARM, 56 bytes, Stack size 32 bytes, mcp2317.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IsrMcp2317_0 &rArr; IsrMcp2317IrqHandler &rArr; isr_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrMcp2317IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[1d9]"></a>InitMcp2317Handler</STRONG> (ARM, 112 bytes, Stack size 0 bytes, mcp2317.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMcp2317_0
</UL>

<P><STRONG><a name="[10]"></a>InitMcp2317_0</STRONG> (ARM, 36 bytes, Stack size 12 bytes, mcp2317.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitMcp2317_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMcp2317Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[1da]"></a>Mcp2317IrqCtrl</STRONG> (ARM, 208 bytes, Stack size 8 bytes, mcp2317.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mcp2317IrqCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
</UL>

<P><STRONG><a name="[9e]"></a>TskNotifyHelperMcp2317</STRONG> (ARM, 584 bytes, Stack size 8 bytes, mcp2317.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TskNotifyHelperMcp2317 &rArr; os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp2317.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>TskNotifyMcp2317</STRONG> (ARM, 1424 bytes, Stack size 160 bytes, mcp2317.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = TskNotifyMcp2317 &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp2317.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>Mcp2317Init</STRONG> (ARM, 2804 bytes, Stack size 88 bytes, mcp2317.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = Mcp2317Init &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create_ex0 (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317IrqCtrl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[ca]"></a>Mcp2317SetOutput</STRONG> (ARM, 1408 bytes, Stack size 88 bytes, mcp2317.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = Mcp2317SetOutput &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ErrorCodeSW_ClearAll
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_ErrorCodeSW_ClearCurr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LibExceptionsFuncs_ExceptionSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActSupportTasks_GenerateInjectSignal
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirAuxPwrMcp2317
</UL>

<P><STRONG><a name="[fa]"></a>Dacrrcs085Init</STRONG> (ARM, 204 bytes, Stack size 24 bytes, dacrrcs085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Dacrrcs085Init &rArr; os_sem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[10a]"></a>Dacrrcs085SetOutput</STRONG> (ARM, 940 bytes, Stack size 48 bytes, dacrrcs085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Dacrrcs085SetOutput &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirAuxDacRrcs085
</UL>

<P><STRONG><a name="[11d]"></a>Dacrrcs085GetOutput</STRONG> (ARM, 204 bytes, Stack size 24 bytes, dacrrcs085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Dacrrcs085GetOutput &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
</UL>

<P><STRONG><a name="[1db]"></a>IsrEncGapDiskIrqHandler</STRONG> (ARM, 732 bytes, Stack size 48 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = IsrEncGapDiskIrqHandler &rArr; StpClkDirClksAbsGet &rArr; StpClkDirTccIrqHandlerClksUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_check (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrEncGapDisk_0
</UL>

<P><STRONG><a name="[11]"></a>IsrEncGapDisk_0</STRONG> (ARM, 56 bytes, Stack size 32 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = IsrEncGapDisk_0 &rArr; IsrEncGapDiskIrqHandler &rArr; StpClkDirClksAbsGet &rArr; StpClkDirTccIrqHandlerClksUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrEncGapDiskIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[1dc]"></a>EncGapDiskIrqCtrl</STRONG> (ARM, 356 bytes, Stack size 16 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EncGapDiskIrqCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_InterruptEnable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PIO_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskClear
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrEncGapDiskGateIrqHandler
</UL>

<P><STRONG><a name="[1df]"></a>IsrEncGapDiskGateIrqHandler</STRONG> (ARM, 64 bytes, Stack size 32 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IsrEncGapDiskGateIrqHandler &rArr; EncGapDiskIrqCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskIrqCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrEncGapDiskGate_0
</UL>

<P><STRONG><a name="[13]"></a>IsrEncGapDiskGate_0</STRONG> (ARM, 56 bytes, Stack size 32 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IsrEncGapDiskGate_0 &rArr; IsrEncGapDiskGateIrqHandler &rArr; EncGapDiskIrqCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrEncGapDiskGateIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[1e0]"></a>InitEncGapDiskHandler</STRONG> (ARM, 112 bytes, Stack size 0 bytes, encgapdisk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEncGapDisk_0
</UL>

<P><STRONG><a name="[12]"></a>InitEncGapDisk_0</STRONG> (ARM, 36 bytes, Stack size 12 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitEncGapDisk_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEncGapDiskHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[1e1]"></a>InitEncGapDiskGateHandler</STRONG> (ARM, 120 bytes, Stack size 0 bytes, encgapdisk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEncGapDiskGate_0
</UL>

<P><STRONG><a name="[14]"></a>InitEncGapDiskGate_0</STRONG> (ARM, 36 bytes, Stack size 12 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitEncGapDiskGate_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEncGapDiskGateHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at91sam7x.o(.data)
</UL>
<P><STRONG><a name="[1e3]"></a>EncGapDiskStpClkDirUnitGet</STRONG> (ARM, 32 bytes, Stack size 0 bytes, encgapdisk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskEncGapDiskMsg
</UL>

<P><STRONG><a name="[9f]"></a>TskEncGapDiskMsg</STRONG> (ARM, 4512 bytes, Stack size 128 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TskEncGapDiskMsg &rArr; StpClkDirOffsetPush &rArr; os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirOffsetPush
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirModuloMaxClksGet
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskStpClkDirUnitGet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> encgapdisk.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>EncGapDiskInit</STRONG> (ARM, 508 bytes, Stack size 16 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EncGapDiskInit &rArr; os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create_ex0 (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskIrqCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[1e4]"></a>EncGapDiskClear</STRONG> (ARM, 1188 bytes, Stack size 32 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EncGapDiskClear &rArr; os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskIrqCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
</UL>

<P><STRONG><a name="[1e6]"></a>_EncGapDiskEdgeCnt</STRONG> (ARM, 448 bytes, Stack size 16 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _EncGapDiskEdgeCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskHomeEdgeGet
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeCnt
</UL>

<P><STRONG><a name="[1e5]"></a>EncGapDiskEdgeCnt</STRONG> (ARM, 148 bytes, Stack size 32 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EncGapDiskEdgeCnt &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EncGapDiskEdgeCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
</UL>

<P><STRONG><a name="[138]"></a>EncGapDiskTeachIn</STRONG> (ARM, 2080 bytes, Stack size 88 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = EncGapDiskTeachIn &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsGet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsVal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMove
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeCnt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EncGapDiskEdgeCnt
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskClear
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskIrqCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>

<P><STRONG><a name="[1e7]"></a>EncGapDiskEdgeErrGet</STRONG> (ARM, 624 bytes, Stack size 40 bytes, encgapdisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1e8]"></a>EncGapDiskStatGet</STRONG> (ARM, 432 bytes, Stack size 40 bytes, encgapdisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1e9]"></a>EncGapDiskOffsetGet</STRONG> (ARM, 280 bytes, Stack size 32 bytes, encgapdisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1ea]"></a>EncGapDiskEdgeGet</STRONG> (ARM, 260 bytes, Stack size 24 bytes, encgapdisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[1eb]"></a>EncGapDiskEdgeDataGet</STRONG> (ARM, 472 bytes, Stack size 40 bytes, encgapdisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[13a]"></a>EncGapDiskHomeEdgeGet</STRONG> (ARM, 1412 bytes, Stack size 240 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = EncGapDiskHomeEdgeGet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirModuloMaxClksGet
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EncGapDiskEdgeCnt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>

<P><STRONG><a name="[13b]"></a>EncGapDiskEdgeZeroSet</STRONG> (ARM, 380 bytes, Stack size 40 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EncGapDiskEdgeZeroSet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>

<P><STRONG><a name="[293]"></a>EncGapDiskCalibrationDataSizeGet</STRONG> (ARM, 8 bytes, Stack size 0 bytes, encgapdisk.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>EncGapDiskCalibrationDataAddrGet</STRONG> (ARM, 36 bytes, Stack size 0 bytes, encgapdisk.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>EncGapDiskCalibrationDataRW</STRONG> (ARM, 1108 bytes, Stack size 40 bytes, encgapdisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[135]"></a>EncGapDiskRunParamsRW</STRONG> (ARM, 636 bytes, Stack size 32 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = EncGapDiskRunParamsRW &rArr; StpClkDirDacSet &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsGet
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirDacSet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirDacGet
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoad
</UL>

<P><STRONG><a name="[13c]"></a>EncGapDiskEdgeGoto</STRONG> (ARM, 1028 bytes, Stack size 104 bytes, encgapdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = EncGapDiskEdgeGoto &rArr; StpClkDirMove &rArr; StpClkDirMoveMax &rArr; _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsGet
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMove
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirProfileAdjust
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskIrqCtrl
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
</UL>

<P><STRONG><a name="[295]"></a>EncGapDiskSnapShotSizeGet</STRONG> (ARM, 8 bytes, Stack size 0 bytes, encgapdisk.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>EncGapDiskSnapShotAddrGet</STRONG> (ARM, 36 bytes, Stack size 0 bytes, encgapdisk.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>EncGapDiskSnapShot</STRONG> (ARM, 2016 bytes, Stack size 56 bytes, encgapdisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>

<P><STRONG><a name="[fe]"></a>Fm25clssInit</STRONG> (ARM, 172 bytes, Stack size 16 bytes, fm25clss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Fm25clssInit &rArr; os_sem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
</UL>

<P><STRONG><a name="[1ee]"></a>Fm25clssCtrl</STRONG> (ARM, 488 bytes, Stack size 40 bytes, fm25clss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
</UL>

<P><STRONG><a name="[1ef]"></a>Fm25clssRDSR</STRONG> (ARM, 560 bytes, Stack size 56 bytes, fm25clss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
</UL>

<P><STRONG><a name="[1f0]"></a>Fm25clssWRSR</STRONG> (ARM, 800 bytes, Stack size 48 bytes, fm25clss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
</UL>

<P><STRONG><a name="[f2]"></a>Fm25clssReadSafe</STRONG> (ARM, 3528 bytes, Stack size 120 bytes, fm25clss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = Fm25clssReadSafe &rArr; SpiMsgChannelNext &rArr; SpiMsgChannelCheck &rArr; SpiMsgChannel &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxQueue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagUnlock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxLock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoad
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ValveActStateRW
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssRead
</UL>

<P><STRONG><a name="[1f1]"></a>Fm25clssRead</STRONG> (ARM, 56 bytes, Stack size 32 bytes, fm25clss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
</UL>

<P><STRONG><a name="[e0]"></a>Fm25clssWrite</STRONG> (ARM, 1808 bytes, Stack size 96 bytes, fm25clss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Fm25clssWrite &rArr; SpiRx &rArr; SpiRxTag &rArr; memcpyflex &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxQueue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxUnlock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxLock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemErase
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsReg_DeviceActiveInterface
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_CurrentValveType
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_Tol_UStepsSameGapsRun
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_Tol_UStepsSameGapsCal
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_EdgeTypeTriggeredOn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_MinUStepsThreshold
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_TrueGapNumber
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_UStepsFullCircle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_Mode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_USPS_Run
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_USPS_Start
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_UStepsBreak
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_UStepsAcc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_USPS_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_Cal_UStepsInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ValveActStateRW
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_RunMotorDriver
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsReg_DAC_HoldMotorDriver
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_ResetTotalSwitchCounter
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsSave
</UL>

<P><STRONG><a name="[297]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[f1]"></a>calloc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = calloc &rArr; malloc &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramSave (via Veneer)
</UL>

<P><STRONG><a name="[1d6]"></a>memcpy</STRONG> (ARM, 16 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductDescSet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitSykamDeviceData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_FindAndSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitDeviceParams
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_DeviceParamsLoad
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerEncode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserCook
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[1f4]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[298]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>memset</STRONG> (ARM, 32 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyflex
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_Clear
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_ErrorStringSW_FindAndSet
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramSave
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc (via Veneer)
</UL>

<P><STRONG><a name="[1f7]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1f6]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonCmdsOwner_SykamDeviceDataLoad
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitSykamDeviceData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonRegistersFuncs_InitDeviceStatusData
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramSelectToModify
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramDelete
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenRegistersFuncs_InitDeviceParams
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_DeviceParamsLoad
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsOwner_StatusDataLoad
</UL>

<P><STRONG><a name="[299]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRestart
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartTx
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserMaximum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskHomeEdgeGet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagQueue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeDataGet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskEncGapDiskMsg
</UL>

<P><STRONG><a name="[29c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__rt_heap_descriptor</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>

<P><STRONG><a name="[29d]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _FDTree_Insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1fd]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b1]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[200]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[202]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf (via Veneer)
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[29f]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>__aeabi_errno_addr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
</UL>

<P><STRONG><a name="[2a2]"></a>__errno$twolibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__rt_errno_addr$twolibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[b3]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b6]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[204]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[203]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ba]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[2a4]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[209]"></a>_ttywrch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[20a]"></a>__rt_fp_status_addr</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_fp_status_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[2a6]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_UtilsTasks_Heartbeat
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_DeviceRunTimeCounter
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRestart
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonModbusTasks_CmdExecution
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetTemperature
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenModbusTasks_CmdExecution
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitDriver
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_US_Configure
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActSupportTasks_GenerateInjectSignal
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsGet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_StatusDataSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActModbusTasks_CmdExecution
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_InitDriver
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmCalcHz
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmCalcCprePrdDty
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerClksUpdate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSetEx
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChange
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirProfileAdjust
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
</UL>

<P><STRONG><a name="[196]"></a>AT91F_AIC_AcknowledgeIt</STRONG> (ARM, 12 bytes, Stack size 0 bytes, stpclkdir.o(i.AT91F_AIC_AcknowledgeIt))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmIrqHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandler
</UL>

<P><STRONG><a name="[20f]"></a>AT91F_PDC_Open</STRONG> (ARM, 136 bytes, Stack size 0 bytes, usart.o(i.AT91F_PDC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_US_Configure
</UL>

<P><STRONG><a name="[178]"></a>AT91F_PIO_CfgPeriph</STRONG> (ARM, 20 bytes, Stack size 0 bytes, pio.o(i.AT91F_PIO_CfgPeriph))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInit
</UL>

<P><STRONG><a name="[18e]"></a>AT91F_PIO_ClearOutput</STRONG> (ARM, 8 bytes, Stack size 0 bytes, stpclkdir.o(i.AT91F_PIO_ClearOutput))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirAuxPwrAt91Pio
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirAuxDirAt91Pio
</UL>

<P><STRONG><a name="[179]"></a>AT91F_PIO_Enable</STRONG> (ARM, 8 bytes, Stack size 0 bytes, pio.o(i.AT91F_PIO_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInit
</UL>

<P><STRONG><a name="[1de]"></a>AT91F_PIO_InterruptDisable</STRONG> (ARM, 8 bytes, Stack size 0 bytes, encgapdisk.o(i.AT91F_PIO_InterruptDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskIrqCtrl
</UL>

<P><STRONG><a name="[1dd]"></a>AT91F_PIO_InterruptEnable</STRONG> (ARM, 8 bytes, Stack size 0 bytes, encgapdisk.o(i.AT91F_PIO_InterruptEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskIrqCtrl
</UL>

<P><STRONG><a name="[17a]"></a>AT91F_PIO_OutputEnable</STRONG> (ARM, 8 bytes, Stack size 0 bytes, pio.o(i.AT91F_PIO_OutputEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInit
</UL>

<P><STRONG><a name="[12f]"></a>AT91F_PIO_SetOutput</STRONG> (ARM, 8 bytes, Stack size 0 bytes, column_oven_signal_processing_tasks.o(i.AT91F_PIO_SetOutput))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirAuxPwrAt91Pio
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirAuxDirAt91Pio
</UL>

<P><STRONG><a name="[19a]"></a>AT91F_PWMC_InterruptDisable</STRONG> (ARM, 8 bytes, Stack size 0 bytes, stpclkdir.o(i.AT91F_PWMC_InterruptDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmIrqHandler
</UL>

<P><STRONG><a name="[1ac]"></a>AT91F_PWMC_InterruptEnable</STRONG> (ARM, 8 bytes, Stack size 0 bytes, stpclkdir.o(i.AT91F_PWMC_InterruptEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerBrake
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirStateSet
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChange
</UL>

<P><STRONG><a name="[210]"></a>AT91F_PWMC_StopChannel</STRONG> (ARM, 8 bytes, Stack size 0 bytes, stpclkdir.o(i.AT91F_PWMC_StopChannel))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop
</UL>

<P><STRONG><a name="[17d]"></a>AT91F_SPI_DisableIt</STRONG> (ARM, 8 bytes, Stack size 0 bytes, spi.o(i.AT91F_SPI_DisableIt))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitUnit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
</UL>

<P><STRONG><a name="[17f]"></a>AT91F_SPI_Enable</STRONG> (ARM, 12 bytes, Stack size 0 bytes, spi.o(i.AT91F_SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitUnit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
</UL>

<P><STRONG><a name="[180]"></a>AT91F_SPI_EnableIt</STRONG> (ARM, 8 bytes, Stack size 0 bytes, spi.o(i.AT91F_SPI_EnableIt))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitUnit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx
</UL>

<P><STRONG><a name="[182]"></a>AT91F_SPI_Reset</STRONG> (ARM, 12 bytes, Stack size 0 bytes, spi.o(i.AT91F_SPI_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitUnit
</UL>

<P><STRONG><a name="[19f]"></a>AT91F_TC_InterruptDisable</STRONG> (ARM, 8 bytes, Stack size 0 bytes, stpclkdir.o(i.AT91F_TC_InterruptDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirInitEx
</UL>

<P><STRONG><a name="[175]"></a>AT91F_US_Configure</STRONG> (ARM, 172 bytes, Stack size 32 bytes, usart.o(i.AT91F_US_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = AT91F_US_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PDC_Open
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[16e]"></a>AT91F_US_DisableIt</STRONG> (ARM, 8 bytes, Stack size 0 bytes, usart.o(i.AT91F_US_DisableIt))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[173]"></a>AT91F_US_EnableIt</STRONG> (ARM, 8 bytes, Stack size 0 bytes, usart.o(i.AT91F_US_EnableIt))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartTx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[19d]"></a>StpClkDirClksAbsShiftSetEx</STRONG> (ARM, 704 bytes, Stack size 56 bytes, stpclkdir.o(i.StpClkDirClksAbsShiftSetEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSet
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskStpClkDirHold
</UL>

<P><STRONG><a name="[19c]"></a>StpClkDirPowerEx</STRONG> (ARM, 796 bytes, Stack size 32 bytes, stpclkdir.o(i.StpClkDirPowerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPower
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskStpClkDirHold
</UL>

<P><STRONG><a name="[199]"></a>StpClkDirPwmMbxId</STRONG> (ARM, 56 bytes, Stack size 0 bytes, stpclkdir.o(i.StpClkDirPwmMbxId))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirStateSet
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueueClear
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueueFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueue
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmIrqHandler
</UL>

<P><STRONG><a name="[192]"></a>StpClkDirTccIrqHandlerBrake</STRONG> (ARM, 48 bytes, Stack size 8 bytes, stpclkdir.o(i.StpClkDirTccIrqHandlerBrake))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StpClkDirTccIrqHandlerBrake
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandler
</UL>

<P><STRONG><a name="[193]"></a>StpClkDirTccIrqHandlerClksUpdate</STRONG> (ARM, 620 bytes, Stack size 40 bytes, stpclkdir.o(i.StpClkDirTccIrqHandlerClksUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = StpClkDirTccIrqHandlerClksUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsGet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandler
</UL>

<P><STRONG><a name="[195]"></a>StpClkDirTccIrqHandlerPrepareLast</STRONG> (ARM, 88 bytes, Stack size 0 bytes, stpclkdir.o(i.StpClkDirTccIrqHandlerPrepareLast))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandler
</UL>

<P><STRONG><a name="[194]"></a>StpClkDirTccIrqHandlerStop</STRONG> (ARM, 284 bytes, Stack size 16 bytes, stpclkdir.o(i.StpClkDirTccIrqHandlerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StpClkDirTccIrqHandlerStop &rArr; os_sem_check &rArr; sem_check
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_check
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_StopChannel
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirQuit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandler
</UL>

<P><STRONG><a name="[215]"></a>_FDTree_Delete</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fdtree.o(i._FDTree_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _FDTree_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[219]"></a>_FDTree_FindFirst</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fdtree.o(i._FDTree_FindFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _FDTree_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[216]"></a>_FDTree_Insert</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fdtree.o(i._FDTree_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _FDTree_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[21a]"></a>_FDTree_RemoveNode</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, fdtree.o(i._FDTree_RemoveNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _FDTree_RemoveNode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1a9]"></a>_StpClkDirStart</STRONG> (ARM, 1476 bytes, Stack size 40 bytes, stpclkdir.o(i._StpClkDirStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _StpClkDirStart &rArr; StpClkDirPowerEx &rArr; os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_check
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPowerEx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_TC_InterruptDisable
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_StopChannel
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_InterruptEnable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_PWMC_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
</UL>

<P><STRONG><a name="[1f2]"></a>__ARM_common_ll_muluu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, calloc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc (via Veneer)
</UL>

<P><STRONG><a name="[21e]"></a>__ARM_fpclassifyf</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[a0]"></a>__SWI_0</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __SWI_0 &rArr; os_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_post_taskswitch (Weak Reference)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_switch_tasks_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[a1]"></a>__SWI_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_membox.o(i.__SWI_1))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[a2]"></a>__SWI_2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_membox.o(i.__SWI_2))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[a3]"></a>__SWI_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_3))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[a4]"></a>__SWI_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_4))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[a6]"></a>__SWI_6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_6))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[a7]"></a>__SWI_7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_7))
<BR>[Address Reference Count : 1]<UL><LI> swi_table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[1ff]"></a>__Heap_Initialize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, heap2mt.o(i.___Heap_Initialize$realtime$concurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extent (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1fc]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, heap2mt.o(i.___Heap_ProvideMemory$realtime$concurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_ProvideMemory &rArr; _FDTree_Insert
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Insert
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[217]"></a>__mathlib_flt_underflow</STRONG> (ARM, 12 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[2a7]"></a>__use_realtime_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fdtree.o(i.__use_realtime_heap), UNUSED)

<P><STRONG><a name="[f3]"></a>free</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, heap2mt.o(i._free$realtime$concurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = free &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Insert
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_FixedMemDataPackagesRW (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenCmdsUser_HeatCoolProgramSave (via Veneer)
</UL>

<P><STRONG><a name="[236]"></a>_init_box</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[1f3]"></a>malloc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, heap2mt.o(i._malloc$realtime$concurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = malloc &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_RemoveNode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_Insert
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FDTree_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[157]"></a>ceil</STRONG> (ARM, 328 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerTimeOutCalc
</UL>

<P><STRONG><a name="[2a8]"></a>__mathlib_expf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, expf.o(i.expf), UNUSED)

<P><STRONG><a name="[124]"></a>expf</STRONG> (ARM, 492 bytes, Stack size 24 bytes, expf.o(i.expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = expf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbnf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
</UL>

<P><STRONG><a name="[11f]"></a>floorf</STRONG> (ARM, 192 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
</UL>

<P><STRONG><a name="[156]"></a>isr_mbx_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; os_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psq_enq
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTmrHandler (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttIrqHandler (via Veneer)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrEncGapDiskIrqHandler (via Veneer)
</UL>

<P><STRONG><a name="[17e]"></a>isr_sem_give</STRONG> (ARM, 24 bytes, Stack size 8 bytes, spi.o(i.isr_sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isr_sem_give &rArr; isr_sem_send &rArr; os_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler
</UL>

<P><STRONG><a name="[170]"></a>isr_sem_send</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; os_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psq_enq
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmIrqHandler (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_give (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrMcp2317IrqHandler (via Veneer)
</UL>

<P><STRONG><a name="[2a9]"></a>__mathlib_logf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, logf.o(i.logf), UNUSED)

<P><STRONG><a name="[123]"></a>logf</STRONG> (ARM, 544 bytes, Stack size 24 bytes, logf.o(i.logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = logf &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbnf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
</UL>

<P><STRONG><a name="[221]"></a>os_block</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_task.o(i.os_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_dly
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_wait
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_itv_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
</UL>

<P><STRONG><a name="[224]"></a>os_chk_robin</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_robin.o(i.os_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_chk_robin &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[226]"></a>os_dec_dly</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rt_list.o(i.os_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_dec_dly &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[227]"></a>os_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.os_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_rdy_first
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_send
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
</UL>

<P><STRONG><a name="[d9]"></a>os_dly_wait</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_time.o(i.os_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_dly_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_UtilsTasks_Heartbeat (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetConvertedData (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_DeviceRunTimeCounter (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRestart (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonModbusTasks_CmdExecution (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportTasks_ExternControlContactHandler (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsUser_GoToHomePos (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenModbusTasks_CmdExecution (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx (via Veneer)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartTx (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportTasks_ExternControlContactHandler (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActSupportTasks_GenerateInjectSignal (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDefaultParams (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActCmdsOwner_CalWithDeviceParams (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActModbusTasks_CmdExecution (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPowerEx (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirQuit (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317 (via Veneer)
</UL>

<P><STRONG><a name="[229]"></a>os_evt_psh</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_event.o(i.os_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_evt_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[127]"></a>os_evt_set</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rt_event.o(i.os_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_evt_set &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GlobalTimer (via Veneer)
</UL>

<P><STRONG><a name="[12c]"></a>os_evt_wait</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rt_event.o(i.os_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_evt_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl (via Veneer)
</UL>

<P><STRONG><a name="[223]"></a>os_get_first</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_list.o(i.os_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_send
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>

<P><STRONG><a name="[241]"></a>os_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.os_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass
</UL>

<P><STRONG><a name="[239]"></a>os_init_robin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_robin.o(i.os_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[22c]"></a>os_init_stack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hal_arm.o(i.os_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>

<P><STRONG><a name="[125]"></a>os_itv_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_time.o(i.os_itv_set))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GlobalTimer (via Veneer)
</UL>

<P><STRONG><a name="[126]"></a>os_itv_wait</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_time.o(i.os_itv_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_itv_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GlobalTimer (via Veneer)
</UL>

<P><STRONG><a name="[14d]"></a>os_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.os_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIrqHandler (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegMsg (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBTrgFilter (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttIrqHandler (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_write (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirOffsetPush (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueueFree (via Veneer)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIrqHandler (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrEncGapDiskIrqHandler (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317 (via Veneer)
</UL>

<P><STRONG><a name="[d5]"></a>os_mbx_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_mailbox.o(i.os_mbx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mbx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonModbusFuncs_InitTasks (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_InitTasks (via Veneer)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_InitTasks (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitUnit (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttInit (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskInit (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitTasks (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirInitEx (via Veneer)
</UL>

<P><STRONG><a name="[22d]"></a>os_mbx_psh</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rt_mailbox.o(i.os_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_mbx_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[145]"></a>os_mbx_send</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, rt_mailbox.o(i.os_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_ExecuteMovement (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirOffsetPush (via Veneer)
</UL>

<P><STRONG><a name="[147]"></a>os_mbx_wait</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, rt_mailbox.o(i.os_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgWaitDecode (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartMsg (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ValveActSupportTasks_GenerateInjectSignal (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskRttMsg (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_clear (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPwmQueueClear (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskStpClkDirHold (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsg (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsgChannel (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx (via Veneer)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskClear (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskEncGapDiskMsg (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyHelperMcp2317 (via Veneer)
</UL>

<P><STRONG><a name="[bf]"></a>os_mut_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_mutex.o(i.os_mut_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit (via Veneer)
</UL>

<P><STRONG><a name="[c3]"></a>os_mut_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rt_mutex.o(i.os_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetConvertedData (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDisableInterrupt (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEnableInterrupt (via Veneer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSoftReset (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDisableChannel (via Veneer)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEnableChannel (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcStartConversion (via Veneer)
</UL>

<P><STRONG><a name="[c1]"></a>os_mut_wait</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rt_mutex.o(i.os_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_mut_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetConvertedData (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDisableInterrupt (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEnableInterrupt (via Veneer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSoftReset (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDisableChannel (via Veneer)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEnableChannel (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcStartConversion (via Veneer)
</UL>

<P><STRONG><a name="[220]"></a>os_psh_req</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_system.o(i.os_psh_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_psh_req
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_ovf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_cnt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_force_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[21f]"></a>os_psq_enq</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_list.o(i.os_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error (via Veneer)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inc_qi
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[222]"></a>os_put_dly</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, rt_list.o(i.os_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>

<P><STRONG><a name="[225]"></a>os_put_prio</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_list.o(i.os_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_pass
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dec_dly
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>

<P><STRONG><a name="[228]"></a>os_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.os_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>

<P><STRONG><a name="[22e]"></a>os_resort_prio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_list.o(i.os_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_resort_prio &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_list
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>

<P><STRONG><a name="[22a]"></a>os_rmv_dly</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, rt_list.o(i.os_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_send
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
</UL>

<P><STRONG><a name="[233]"></a>os_rmv_list</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rt_list.o(i.os_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
</UL>

<P><STRONG><a name="[149]"></a>os_sem_give</STRONG> (ARM, 40 bytes, Stack size 8 bytes, mbpb.o(i.os_sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_sem_give &rArr; os_sem_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_send (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRead
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRestart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductAddrSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterSetEx
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductDescSet
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085GetOutput
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductStateSet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartMsg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartTx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegDiscreteCB
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegCoilsCB
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegHoldingCB
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegInputCB
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserChange
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyExTo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartTx
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRx
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartMsg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyRx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterStateGet
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterStateSet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgRebuild
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBMsgCtrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBTrgFilter
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBMsg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirDacSet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskRunParamsRW
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskHomeEdgeGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeZeroSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttMsg
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttSLCKGet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskRttMsg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPowerEx
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSetEx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSnapShot
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirDacGet
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveResultGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftGet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSet
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsSet
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsRawGet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsRawSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsMakePlus
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsVal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsSet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskStpClkDirHold
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagQueue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagUnlock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxLock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelNext
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgUnit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsgChannel
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWRSR
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssRDSR
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssCtrl
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskSnapShot
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskCalibrationDataRW
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeDataGet
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskOffsetGet
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskStatGet
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeErrGet
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeCnt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317
</UL>

<P><STRONG><a name="[e2]"></a>os_sem_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rt_semaphore.o(i.os_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_sem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_InitTasks (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitUnit (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitChannel (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttInit (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssInit (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskInit (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085Init (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirInitEx (via Veneer)
</UL>

<P><STRONG><a name="[234]"></a>os_sem_psh</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_semaphore.o(i.os_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_sem_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[16b]"></a>os_sem_send</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.os_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_sem_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReportSlaveID (via Veneer)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_give (via Veneer)
</UL>

<P><STRONG><a name="[148]"></a>os_sem_take</STRONG> (ARM, 48 bytes, Stack size 16 bytes, mbpb.o(i.os_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = os_sem_take &rArr; os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRead
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttRestart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductAddrSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterSetEx
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductDescSet
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegAccess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannel
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085GetOutput
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBProductStateSet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartMsg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartTx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegDiscreteCB
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegCoilsCB
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegHoldingCB
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBRegInputCB
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserChange
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyExTo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartTx
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRx
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartMsg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerParserCook
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerNotifyRx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterStateGet
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgFilterStateSet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBTrgRebuild
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBMsgCtrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBTrgFilter
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBMsg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirDacSet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskTeachIn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskRunParamsRW
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskHomeEdgeGet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeZeroSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGoto
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttMsg
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttSLCKGet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskRttMsg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirPowerEx
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSetEx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSnapShot
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirDacGet
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveResultGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftGet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsShiftSet
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsSet
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsRawGet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksAbsRawSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsMakePlus
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsVal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirClksPosOffsSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirSpeedChangeWait
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirMoveMax
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskStpClkDirHold
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagQueue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTagUnlock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxLock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxTag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRxTag
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgUnit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiMsgChannel
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWRSR
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssRDSR
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssCtrl
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskSnapShot
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskCalibrationDataRW
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeDataGet
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeGet
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskOffsetGet
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskStatGet
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeErrGet
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskEdgeCnt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317
</UL>

<P><STRONG><a name="[e4]"></a>os_sem_wait</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rt_semaphore.o(i.os_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_sem_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_DeviceRunTimeCounter (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBFuncReportSlaveID (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_take (via Veneer)
</UL>

<P><STRONG><a name="[211]"></a>os_stk_check</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_arm.o(i.os_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[5d]"></a>os_sys_init1</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, rt_task.o(i.os_sys_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_sys_init1 &rArr; os_init_context &rArr; os_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon (via Veneer)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init (Weak Reference)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_run
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_robin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[5f]"></a>os_sys_manager</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, rt_system.o(i.os_sys_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = os_sys_manager &rArr; os_tmr_tick &rArr; os_tmr_call
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_ovf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_cnt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_reload (Weak Reference)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dec_dly
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_post_taskswitch (Weak Reference)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager_ret
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dec_qc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_tick
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_rdy_first
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[14c]"></a>os_tmr_create</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rt_timer.o(i.os_tmr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_tmr_create
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData (via Veneer)
</UL>

<P><STRONG><a name="[14b]"></a>os_tmr_kill</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_timer.o(i.os_tmr_kill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_tmr_kill
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData (via Veneer)
</UL>

<P><STRONG><a name="[23d]"></a>os_tmr_tick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_timer.o(i.os_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_tmr_tick &rArr; os_tmr_call
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[a9]"></a>os_tsk_create0</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rt_task.o(i.os_tsk_create0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_notify (Weak Reference)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_InitTasks (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonSupportFuncs_InitTasks (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonModbusFuncs_InitTasks (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActSupportFuncs_InitTasks (via Veneer)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveActModbusFuncs_InitTasks (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_InitTasks (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_InitTasks (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenModbusFuncs_InitTasks (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create_ex0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.os_sys_init1)
</UL>
<P><STRONG><a name="[150]"></a>os_tsk_create_ex0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rt_task.o(i.os_tsk_create_ex0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = os_tsk_create_ex0 &rArr; os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBInit (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitUnit (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttInit (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncGapDiskInit (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirInitEx (via Veneer)
</UL>

<P><STRONG><a name="[ed]"></a>os_tsk_delete</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rt_task.o(i.os_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_tsk_delete &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_notify (Weak Reference)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_list
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenMain_Init (via Veneer)
</UL>

<P><STRONG><a name="[f5]"></a>os_tsk_pass</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_task.o(i.os_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_tsk_pass &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_same_rdy_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_UtilsTasks_Heartbeat (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssReadSafe (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWrite (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317SetOutput (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2317Init (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dacrrcs085SetOutput (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartRx (via Veneer)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskUsartTx (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send_safe (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartMsg (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerSyncPrepareRx (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBData (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskMBPBMsg (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirWait (via Veneer)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RttMsg (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_clear (via Veneer)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StpClkDirStart (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StpClkDirTccIrqHandlerStop (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskStpClkDirHold (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgChannelCheck (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMsgUnit (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiRx (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskSpiTx (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssWRSR (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssRDSR (via Veneer)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm25clssCtrl (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyMcp2317 (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TskNotifyHelperMcp2317 (via Veneer)
</UL>

<P><STRONG><a name="[bc]"></a>os_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.os_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error (via Veneer)
</UL>

<P><STRONG><a name="[eb]"></a>rintf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rintf.o(i.rintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetTemperature
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
</UL>

<P><STRONG><a name="[242]"></a>_d2f</STRONG> (ARM, 108 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetTemperature
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[245]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[24a]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetTemperature
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerTimeOutCalc
</UL>

<P><STRONG><a name="[248]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_cdcmpeq</STRONG> (ARM, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
</UL>

<P><STRONG><a name="[249]"></a>_dcmpeq</STRONG> (ARM, 148 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_d2uiz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerTimeOutCalc
</UL>

<P><STRONG><a name="[24b]"></a>_dfixu</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[2ab]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[24d]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerTimeOutCalc
</UL>

<P><STRONG><a name="[24c]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_cdcmple</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
</UL>

<P><STRONG><a name="[24e]"></a>_dcmple</STRONG> (ARM, 148 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[251]"></a>__fpl_dcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBPBSerTimeOutCalc
</UL>

<P><STRONG><a name="[24f]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[244]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[247]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_cdrcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[250]"></a>_drcmple</STRONG> (ARM, 140 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[252]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
</UL>

<P><STRONG><a name="[254]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetTemperature
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
</UL>

<P><STRONG><a name="[255]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_CalcMean
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[257]"></a>_fadd</STRONG> (ARM, 196 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[259]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbnf
</UL>

<P><STRONG><a name="[25d]"></a>__fpl_fcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_CalcMean
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[25b]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_cfcmpeq</STRONG> (ARM, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
</UL>

<P><STRONG><a name="[25c]"></a>_fcmpeq</STRONG> (ARM, 132 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[25e]"></a>_ffix</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[25f]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[2ac]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[261]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilsFuncs_CalcMean
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetTemperature
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[260]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_cfcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
</UL>

<P><STRONG><a name="[262]"></a>_fcmple</STRONG> (ARM, 132 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[265]"></a>__fpl_fcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_CommonSupportTasks_MainboardVoltageMonitoring
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[263]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[256]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[af]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _fp_init &rArr; __rt_fp_status_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[2ad]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[243]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_cfrcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
</UL>

<P><STRONG><a name="[264]"></a>_frcmple</STRONG> (ARM, 124 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[21b]"></a>_frnd</STRONG> (ARM, 100 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_frsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSignalProcessingTasks_TemperatureControl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ColumnOvenSupportTasks_GasSensing
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[266]"></a>_frsb</STRONG> (ARM, 20 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_GetControlOutput
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSignalProcessingFuncs_CalcControlParams
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_CalcHeatCoolProgramTimes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColumnOvenSupportFuncs_SetDacOutput
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[268]"></a>_fsub</STRONG> (ARM, 304 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[25a]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[21d]"></a>__ARM_scalbnf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[218]"></a>scalbnf</STRONG> (ARM, 96 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[2ae]"></a>__fpl_inf_scalbnf</STRONG> (ARM, 0 bytes, Stack size unknown bytes, scalbnf.o(x$fpl$scalbnf), UNUSED)

<P><STRONG><a name="[269]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[2af]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[62]"></a>os_def_interrupt</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_def_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[22b]"></a>os_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.os_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_init_context &rArr; os_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[61]"></a>Switch_task</STRONG> (ARM, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[20d]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[20c]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[20b]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[20e]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[253]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[246]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[267]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[258]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[26a]"></a>__fpl_infinity</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbnf
</UL>

<P><STRONG><a name="[214]"></a>__user_heap_extent</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[206]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[23b]"></a>os_tmr_reload</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[235]"></a>rt_init</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[240]"></a>rt_notify</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
</UL>

<P><STRONG><a name="[212]"></a>rt_post_taskswitch</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>
<HR></body></html>
